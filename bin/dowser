#! /bin/csh -f
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
#* This is part of the DOWSER program
#*
#* DOWSER finds buried water molecules in proteins.
#*  cf. Zhang & Hermans, Proteins: Structure, Function and Genetics 24: 433-438, 1996
#*
#* DOWSER was developed by the Computational Structural Biology Group at the 
#* University of North Carolina, Chapel Hill by Li Zhang, Xinfu Xia, Jan Hermans, 
#* and Dave Cavanaugh.  Revised 1998.
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
#*   dowser script - this does the whole process from A to Z
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

set DICTFILE = $DOWSER/DATA/atomdict.db
set PARMFILE = $DOWSER/DATA/atomparms.db
set DFILE = dowser_temp_dict
set PFILE = dowser_parm_dict
set prog_name = $0
set prog_tail = $prog_name:t

set XD = $DOWSER/bin/$DOW_MACH
set BD = $DOWSER/bin
set NOXTAL = "0"
set ONLYXTAL = "0"

echo $XD
echo $BD

foreach i ( $DFILE $PFILE)
    if ( -e $i ) then;
	/bin/rm $i
    endif
end

set BAD = "0"
if ( $#argv < 1 ) then
    set BAD = "1"
else
    if ( $argv[1] == "help" ) then
	set BAD = "1"
    endif
endif
if ( $BAD == "1" ) then
    echo "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    echo "    *"
    echo "    *  DOWSER: A program to place water molecules in cavities"
    echo "    *          inside protein molecules."
    echo "    *"
    echo "    *  USAGE:"
    echo "    *      dowser xtal_coordinates.pdb [OPTIONS]"
    echo "    *"
    echo "    *  OPTIONS:"
    echo "    *     -hetero: include hetero atoms, except xtal water"
    echo "    *     -atomtypes type_file: supply additional residue descriptions"
    echo "    *     -atomparms parm_file: supply LJ parameters and MS radii for additional atom types"
    echo "    *     -probe probe_size: change MS probe size from default = 0.2 A"
    echo "    *     -separation separation_length: change separation between internal points from default = 1. A"
    echo "    *     -noxtalwater : do not add xtal water positions to the set of positions to be tested"
    echo "    *     -onlyxtalwater : test only the positions of the xtal waters"
    echo "    *"
    echo "    * see also dowman.htm"
    echo "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
    exit 1
endif

echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
echo "*                                                           *"
echo "*  DOWSER: A program to place water molecules in cavities   *"
echo "*          inside protein molecules.                        *"
echo "*                                                           *"
echo "* Developed by the Computational Structural Biology group   *"
echo "* at the Univ. of North Carolina at Chapel Hill.            *"
echo "* Authors: Li Zhang, Xinfu Xia, Jan Hermans, Dave Cavanaugh *"
echo "* Revised February 1998                                     *"
echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"

if ( $prog_tail == "dowser-repeat" ) then
    echo "*"
    echo "* dowser-repeat: run dowser a second time in order to find additional water molecules"
    echo "*     the dowserwat water molecules are included in the protein structure."
    echo "*"
    echo "* CREATE A NEW PDB file from $1 and dowserwat.pdb"
    if ( -e dowserwat.pdb ) then
	append_dowser_water $1 dowserwat.pdb
	set PdbFile = "ext_$1"
	set NOXTAL = "1"
    else
	echo "* The file 'dowserwat.pdb' must exist to run dowser-repeat"
	echo "* Program not executed"
	echo "*"
	exit 1
    endif
else
    set PdbFile = $1
endif

# Clean up files
    echo "*  "
    echo "* CLEAN UP FILES"
    echo "* execute: cleanup_dowser"
    $BD/cleanup_dowser all

# If there is more than one argument, save the command in dowser.cmd
    if ( $#argv > 1 ) then
	echo "* Save the dowser command in dowser.cmd"
	/bin/rm -f dowser.cmd
	echo $0 $argv > dowser.cmd
    endif
    echo "*  "

# Parse arguments
    set reformat_argument = ""
    set param_file = ""
    set N = $#argv
    set M = $N
    set SEPARATION = 1
    @	M ++
    while ( $N != 0 )
	set X = $argv[$N]
	if ( "$X" == '-separation' ) then
	    set SEPARATION = $argv[$M]
	endif
	if ( "$X" == '-hetero' ) then
	    set reformat_argument = "$reformat_argument -hetero"
	endif
	if ( "$X" == '-atomtypes' ) then
	    set reformat_argument = "$reformat_argument -atomtypes $DFILE"
	    cat $DICTFILE $argv[$M] > $DFILE
	endif
	if ( "$X" == '-atomparms' ) then
	    set reformat_argument = "$reformat_argument -atomparms $PFILE"
	    cat $PARMFILE $argv[$M] > $PFILE
	endif
	if ( "$X" == '-onlyxtalwater' ) then
	    set ONLYXTAL = "1"
	endif
	if ( "$X" == -noxtalwater ) then
	    set NOXTAL = "1"
	endif
	if ( "$X" == '-probe' ) then
    # change probe radius for ms program
	    set param_file = "ms.param"
	    /bin/rm -f $param_file
	    echo $argv[$M] | awk '{printf("   3.00000   %7.5f    0    2",$1)}' > $param_file
	endif
	@	N --
	@	M --
    end  # end of while loop

# Reformat the PDB file
    echo "* REFORMAT THE INPUT PDB FILE and EXTEND WITH POLAR HYDROGEN ATOMS"
    echo "* execute: reformatPDB -pdbin $PdbFile $reformat_argument -pdbout reform.pdb"
    echo "*"
    $XD/reformatPDB -pdbin $PdbFile $reformat_argument -pdbout reform.pdb
    if ( $status != "0" ) then
	echo "*** execution of dowser is terminated"
	exit 1
    endif

    foreach i ( $DFILE $PFILE)
	if ( -e $i ) then
	    /bin/rm $i
	endif
    end

# Extract water molecules from the input pdb file
    echo "*"
    echo "* EXTRACT WATER MOLECULES FROM THE INPUT PDB FILE"
    echo "* Execute: grep ^HETATM.*HOH $1 > xtal_o.dow"
    grep "^HETATM.*HOH" $1 > xtal_o.dow
    set W = `wc xtal_o.dow`
    echo "* The input file contains $W[1] crystallographic water molecules"
    if ( $W[1] == "0" ) then
	/bin/rm xtal_o.dow
    endif
    echo "*  "

# Calculate the energies of xtal waters
#   but avoid doing this if dowser waters have already been added to the file
#   or if there are no xtal waters

if ( $prog_tail != "dowser-repeat" ) then
    grep "^ATOM.*HOH" $PdbFile >& /dev/null
    set WW = $status
    if ( $WW == "1" & $W[1] != "0" ) then
	echo "* CALCULATE THE ENERGIES OF XTAL WATERS"
	echo "*    a. REMOVE EXTERNAL WATERS FROM THE XTALWAT SET (creating xtal_o.pdb)"
	echo "*       execute: drain reform.pdb xtal_o.dow xtalsurf.dow xtal_o.pdb"
	$XD/drain reform.pdb xtal_o.dow xtalsurf.dow xtal_o.pdb
	set W = `wc xtal_o.pdb`
	echo "*       Of the crystallographic waters $W[1] are internal"
	if ($W[1] != "0") then
	    echo "*"
	    echo "*    b. PLACE HYDROGENS ON XTAL WATERS IN THE MOST ENERGETICALLY FAVORABLE ORIENTATION (creating xtal_hoh.pdb)"
	    echo "*       execute: placeWat reform.pdb xtal_o.pdb rotate > place_xtal_o.dow"
	    $XD/placeWat reform.pdb xtal_o.pdb rotate > place_xtal_o.dow
	    if ( $status == "1") then
	       echo "*       Dowser execution terminated after error in optimization step"
	       exit 1
	    endif
	    echo ""
	    echo "*  "
	    echo "*    c. REFINE XTAL WATER ORIENTATIONS by rotation only (with mutual interaction) "
	    echo "*       execute: RefineWat reform.pdb place_xtal_o.dow rotate > xtal_hoh.pdb"
	    $XD/RefineWat reform.pdb place_xtal_o.dow rotate > xtal_hoh.pdb
	    echo "*       Performed $status iteration(s) for refinement"
	endif
	echo "*"
    endif
endif

##### Test the crystallographic water positions
if ( $ONLYXTAL == "1" ) then
    set W = `wc place_xtal_o.dow`
    $XD/chooser place_xtal_o.dow chooser.dow distance
    /bin/mv chooser.dow place_xtal_o.dow
    set WW = `wc place_xtal_o.dow`

    if ( $W[1] != $WW[1] ) then
	echo "* OVERLAPS HAVE BEEN REMOVED - xtal water of lowest-energy retained" 
	echo "* execute: chooser place_xtal_o.dow chooser.dow distance"
	echo "* execute: mv chooser.dow place_xtal_o.dow"
	set W = $WW[1]
@	W /= 3
	echo "* $W water molecules remain"
	echo "*"
    endif

    echo "* REFINE THE INTERNAL XTAL WATERS by rotation and translation, with mutual interaction"
    echo "*"
    $XD/RefineWat reform.pdb place_xtal_o.dow both > dowserwat.pdb
    cp dowserwat.pdb dowserwat_all.pdb 
# Sort water by ascending energies 
    echo "* SORT WATER MOLECULES BY ASCENDING ENERGIES"
    echo "* execute: chooser dowserwat.pdb chooser.dow distance"
    $XD/chooser dowserwat.pdb chooser.dow distance
    echo "* execute: mv chooser.dow dowserwat.pdb"
    /bin/mv chooser.dow dowserwat.pdb
    echo "*"

    goto Finish
endif
    
##### Actual dowser program
# Compute the Connolly surface
    echo "* COMPUTE THE MOLECULAR SURFACE"
    echo "*    a. CONVERT PDB to MS format, eliminate H atoms and create file ms.rad"
    echo "*       execute: pdb2ms reform.pdb ms.dow"
    $XD/pdb2ms reform.pdb ms.dow
    echo "*"

    echo "*    b. RUN THE QMS program"
	if ( $param_file == "" ) then
	    set W=`cat $DOWSER/DATA/ms.param`
	    set param_file=$DOWSER/DATA/ms.param
	else
	    set W=`cat $param_file`
	endif
    echo "*       PROBE RADIUS for QMS program is $W[2]"

# new: use the qms progam (which finds only those surface points
#      at which the probe contacts 3 solute atoms)
    set atomcount = `wc ms.dow`
    set MSRAD = ms.rad
    set radiuscount = `wc $MSRAD`
    echo "* execute: qms ms.dow $atomcount[1] $MSRAD $radiuscount[1] $W[2] > xms.dow"
    $XD/qms ms.dow $atomcount[1] $MSRAD $radiuscount[1] $W[2] > xms.dow
    echo "*"

# old style: use the Connolly molecular surface program
#    echo "*       execute: xms $param_file ms.rad < ms.dow > xms.dow "
#    $XD/xms $param_file ms.rad < ms.dow > xms.dow 

    set W = `wc xms.dow`
    echo "*       The MS program has produced $W[1] surface points"
    echo "*"

    echo "*    c. CONVERT OUTPUT FROM MS"
    echo "*       execute: ms2pdb < xms.dow > pdbms.dow"
    $BD/ms2pdb < xms.dow > pdbms.dow
    echo "*"

# Sort surface into buried and exposed 
    if ( $prog_tail == "dowser" || $prog_tail == "dowser-repeat" ) then
	echo "* SORT SURFACE INTO BURIED AND EXPOSED"
	echo "* execute: drain reform.pdb pdbms.dow surface.wat intsurf.pdb"
	$XD/drain reform.pdb pdbms.dow surface.wat intsurf.pdb
	set W = `wc intsurf.pdb`
	if ($W[1] == 0)  then
	    echo "* Dowser finds no internal surface points"
	    echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
	    $BD/cleanup_dowser
	    exit
	else
	    echo "* Of the surface points $W[1] are internal"
	    echo "*"
	endif

# Reduce the surface points
	if ( "$SEPARATION" != "0" ) then
	    echo "* REDUCE THE NUMBER OF INTERNAL POINTS with $SEPARATION Angstrom separation"
	    echo "* execute: ReduceIntSurf intsurf.pdbx tmp $SEPARATION"
	    /bin/rm -f tmp
	    $XD/ReduceIntSurf intsurf.pdb tmp $SEPARATION
	    /bin/mv tmp intsurf.pdb
	endif

# Optionally, add the internal XTAL waters to the internal surface sites
	if ( $NOXTAL == "0" ) then
	    if ( -e xtal_o.pdb ) then
		echo "*"
		echo "* ADD the internal XTAL waters to the internal surface sites"
		echo "*"
		/bin/rm -f tmp
		mv intsurf.pdb tmp 
		cat xtal_o.pdb tmp > intsurf.pdb
		/bin/rm tmp
	    endif
	endif

# this executed when command name is "dowserx"
# Compute Surface 2 using large probe radius:

    else
	echo "* COMPUTE MOLECULAR SURFACE 2 USING A LARGE PROBE RADIUS"
	echo "* execute: xms $DOWSER/DATA/ms_largeR.param < ms.dow > bigms.dow"
	/bin/rm -f BEFORE REENTRANT XMS.log
	$XD/xms  $DOWSER/DATA/ms_largeR.param < ms.dow > bigms.dow
	echo "*  "
	echo "* execute: ms2pdb < bigms.dow > pdbbigms.dow"
	$BD/ms2pdb < bigms.dow > pdbbigms.dow
	echo "*"

# scrape away waters hit by large probe
	echo "* REMOVE POINTS IN SURFACE-1 THAT ARE CLOSE TO SURFACE 2"
	echo "* execute: scrape pdbms.dow pdbbigms.dow > intsurf.pdb"
	$XD/scrape pdbms.dow pdbbigms.dow > intsurf.pdb
	set W = `wc intsurf.pdb`
	echo "* Of the surface points $W[1] are internal"
	echo "*"
    endif

# make surface points look like atoms (April 2003)
    sed 's/          0              0/HETATM    1  O   HOH     1/' intsurf.pdb >! tmp
    /bin/mv tmp intsurf.pdb

# Compute energies for best water placement for each input xyz
    echo "* COMPUTE ENERGIES FOR BEST WATER PLACEMENT FOR EACH INPUT XYZ"
    echo "* execute: placeWat reform.pdb intsurf.pdb both > placewat.dow"
    $XD/placeWat reform.pdb intsurf.pdb both > placewat.dow
    if ( $status == "1") then
       echo "* Dowser execution terminated after error in optimization step"
       exit 1
    endif
    echo " "
    echo "*"

# Sort water by ascending energies and retain non-overlapping set
    echo "* SORT WATER MOLECULES BY ASCENDING ENERGIES and ELIMINATE"
    echo "* OVERLAPPING WATERS"
    echo "* execute: chooser placewat.dow chooser.dow distance"
    $XD/chooser placewat.dow chooser.dow distance
    echo "* There are $status waters remaining"
    echo "*"

# Refine the final water positions.  Waters now can "see" each other.
    echo "* REFINE THE FINAL WATER POSITIONS - DOWSER WATERS NOW INTERACT WITH EACH OTHER"
    echo "* execute: RefineWat reform.pdb chooser.dow both > dowserwat.dow"
    $XD/RefineWat reform.pdb chooser.dow both > refine.dow
    echo "* Performed $status iteration(s) for refinement"
    echo "*"

# Sort water by ascending energies and retain non-overlapping set
    echo "* SORT WATER MOLECULES BY ASCENDING ENERGIES and ELIMINATE"
    echo "* OVERLAPPING and HIGH ENERGY WATERS"
    echo "* execute: chooser refine.dow dowserwat_all.pdb both"
    $XD/chooser refine.dow dowserwat_all.pdb both
    set W = `wc dowserwat_all.pdb`
@	W = $W[1] / 3
    echo "* There are $W remaining water molecules"
    echo "*"

# drain external waters (only for buried waters)
    if ( $prog_tail == "dowser" | $prog_tail == "dowser-repeat" ) then
	echo "* DRAIN AWAY EXTERNAL DOWSER WATERS"
	echo "* execute: drain reform.pdb dowserwat_all.pdb junk.dow dowserwat.pdb"
	$XD/drain reform.pdb dowserwat_all.pdb junk.dow dowserwat.pdb
Finish:
	set W = `wc dowserwat.pdb`
@	W = $W[1] / 3
	echo "* There are $W remaining water molecules"
	echo "*"
    else
        cp dowserwat_all.pdb dowserwat.pdb
    endif

    if ( $W != "0" ) then
# Compare the locations of the dowser and xtal waters
	if ( -e xtal_o.dow & -e dowserwat.pdb ) then
	    echo "* Compare the locations of the dowser and xtal waters"
	    set XTAL_HOH = "xtal_hoh.pdb"
	    if ( ! -e xtal_hoh.pdb ) then
		if ( -e xtal_hoh.pdb_1 ) then
		    set XTAL_HOH = "xtal_hoh.pdb_1"
		else
		    touch $XTAL_HOH
		endif
	    endif
	    echo "* execute: CompareWat dowserwat_all.pdb dowserwat.pdb xtal_o.dow $XTAL_HOH"
	    echo "*"
	    $XD/CompareWat dowserwat_all.pdb dowserwat.pdb xtal_o.dow $XTAL_HOH > dowser_report
	    cat dowser_report
	endif
    endif

# Place identifying REMARK in output files
    echo "*"
    echo "* Place a REMARK to identify original pdb file in each output pdb file"
    foreach i ( xtal_o xtal_hoh intsurf dowserwat reform dowser_report )
	set fil = $i.pdb
	/bin/rm -f junk
	if ( -e $fil ) then
	    mv $fil junk
	    echo "REMARK $PdbFile $fil" > $fil
	    cat junk >> $fil
	    /bin/rm junk
	endif
    end

# Remove intermediate files 
    echo "*"
    echo "* Remove intermediate files" 
    $BD/cleanup_dowser

echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
echo "* * * * * end of dowser script has been reached * * * * * *"
echo "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
# end dowser script #
