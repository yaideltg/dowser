c DOWSER  modifications: (Feb 98)
c   (1) get DOWSER environment variable
c   (2) hardwired filename for runtime parameters: $DOWSER/DATA/ms.param
c   (3) hardwired filename for atomic radii: $DOWSER/DATA/ms.rad
c   (4) if command is: xms Argument1 [Argument2]
c       then filename for runtime parameters = Argument1
c       [and filename for runtime radii      = Argument2]
c       (to allow ordinary and BIG probe radius)
c 
C MOLECULAR SURFACE PROGRAM
C MS
C
C DECEMBER 16, 1983
C
C COPYRIGHT C 1983
C BY MICHAEL CONNOLLY
C
C WRITTEN BY MICHAEL CONNOLLY
C
C MAILING ADDRESS:
C
C MICHAEL CONNOLLY
C MOLECULAR BIOLOGY DEPARTMENT
C SCRIPPS CLINIC AND RESEARCH FOUNDATION
C 10666 NORTH TORREY PINES RD.
C LA JOLLA, CA 92037, U.S.A.
C
C PHONE NUMBER: (619) 455-9100  EXT. 2838
C
C
C REFERENCES:
C
C M.L. CONNOLLY, "SOLVENT-ACCESSIBLE SURFACES OF PROTEINS
C AND NUCLEIC ACIDS", SCIENCE, VOLUME 221, PAGES 709-713 (1983).
C
C M.L. CONNOLLY, "ANALYTICAL MOLECULAR SURFACE CALCULATION",
C JOURNAL OF APPLIED CRYSTALLOGRAPHY,
C VOLUME 16, PAGES 548-558 (1983).
C
C
C THE PROGRAM AND ITS INPUT AND OUTPUT ARE BRIEFLY
C DESCRIBED BELOW.  FURTHER INFORMATION MAY BE FOUND
C IN THE RUNOFF DOCUMENTS:
C
C MS: USER'S GUIDE
C MS: MAINTENANCE MANUAL
C
C THIS PROGRAM MAY BE FREELY DISTRIBUTED TO ANYONE.
C
C IT IS WRITTEN IN FORTRAN 77.
C
C MS CALCULATES THE MOLECULAR SURFACE OF A MOLECULE
C GIVEN THE COORDINATES OF ITS ATOMS.  VAN DER WAALS RADII FOR
C THE ATOMS AND THE PROBE RADIUS MUST ALSO BE SPECIFIED.
C
C THE TERM MOLECULAR SURFACE WAS INTRODUCED BY F.M. RICHARDS
C (ANNUAL REVIEWS OF BIOPHYSICS AND BIOENGINEERING, 1977,
C PAGES 151-176) WITH A SPECIFIC MEANING.  THE SURFACE
C RICHARDS DEFINED CONSISTS OF TWO PARTS:  (1) THE CONTACT
C SURFACE AND (2) THE REENTRANT SURFACE.  HE DEFINES THE
C CONTACT SURFACE TO BE THAT PART OF THE VAN DER WAALS
C SURFACE OF EACH ATOM WHICH IS ACCESSIBLE TO A PROBE SPHERE
C OF A GIVEN RADIUS.  HE DEFINES THE REENTRANT SURFACE TO BE
C THE INWARD-FACING PART OF THE PROBE SPHERE WHEN IT IS
C SIMULTANEOUSLY IN CONTACT WITH MORE THAN ONE ATOM.
C
C IN IMPLEMENTING THIS DEFINITION I HAVE FOUND THAT THERE ARE
C TWO KINDS OF REENTRANT SURFACE:  (1) CONCAVE REENTRANT
C SURFACE, WHICH IS GENERATED WHEN THE PROBE SPHERE
C SIMULTANEOUSLY TOUCHES THREE ATOMS AND (2) SADDLE-SHAPED
C REENTRANT SURFACE, WHICH IS GENERATED AS THE PROBE SPHERE
C ROLLS ALONG THE CREVICE BETWEEN TWO ATOMS.
C I HAVE ALSO FOUND THAT REENTRANT SURFACE BELONGING TO ONE
C PROBE MAY BE CONTAINED IN THE INTERIOR VOLUME OF AN
C OVERLAPPING PROBE AND SO MUST BE REMOVED.
C
C THE INPUT TO THIS PROGRAM CONSISTS OF THREE FILES.
C
C THE FIRST FILE CONTAINS ONE RECORD SPECIFYING THE REQUESTED
C DENSITY OF SURFACE POINTS (THE NUMBER OF SURFACE POINTS
C PER UNIT AREA), THE PROBE RADIUS, THE BURIED SURFACE
C FLAG AND THE ASCII/BINARY LONG/SHORT OUTPUT FLAG.
C NORMALLY THE BURIED SURFACE FLAG WILL BE BLANK OR ZERO.
C IF THIS FLAG IS EQUAL TO 1, THEN THE
C ONLY SURFACE CALCULATED WILL BE THE SURFACE OF EACH
C MOLECULE THAT IS BURIED BY THE OTHER MOLECULES.
C IF THIS FLAG IS EQUAL TO 2, BOTH BURIED AND UNBURIED
C SURFACE ARE CALCULATED, BUT THE BURIED SURFACE POINTS
C ARE FLAGGED BY A 1 IN THE BURIED OUTPUT FIELD TO THE
C RIGHT OF THE SURFACE NORMAL.
C THE ASCII/BINARY LONG/SHORT OUTPUT FLAG
C MAY HAVE ONE OF THESE FOUR VALUES:
C
C 0      ASCII       LONG
C 1      BINARY      LONG
C 2      ASCII       SHORT
C 3      BINARY      SHORT
C
C THE VARIOUS OUTPUT FORMATS ARE DISCUSSED BELOW.
C
C THE FORMAT OF THE PARAMETER RECORD IS: (2F10.5,2I5)
C
C THE SECOND FILE CONTAINS ATOMIC RADIUS RECORDS.
C EACH RECORD HAS AN INTEGER THAT IS THE ATOM TYPE
C AND A VAN DER WAALS RADIUS FOR THAT TYPE.
C THE ATOM TYPES NEED NOT BE CONTIGUOUS OR IN
C INCREASING ORDER. THE FORMAT IS: (I5,F10.5).
C
C THE THIRD FILE CONTAINS THE ATOMIC COORDINATE RECORDS.
C EACH ATOMIC COORDINATE RECORD HAS THE X, Y AND Z COORDINATES
C OF THE ATOMS, FOLLOWED BY THE ATOM TYPE, A SURFACE
C REQUEST NUMBER AND A MOLECULE NUMBER.
C THE FORMAT IS: (3F10.5,3I5).
C THE SURFACE REQUEST NUMBER MAY BE 0, 1 OR 2.
C 0 MEANS THAT THE ATOM IS TO BE IGNORED,
C EXCEPT FOR OCCUPYING A PLACE IN THE SEQUENCE OF ATOM NUMBERS.
C 1 MEANS THAT NO SURFACE IS TO BE GENERATED FOR THIS ATOM,
C BUT PROBE POSITIONS THAT COLLIDE WITH THIS ATOM WILL STILL
C BE DISALLOWED.  2 MEANS THAT WE ARE REQUESTED TO GENERATE
C SURFACE FOR THIS ATOM.  IN MOST CASES 2 SHOULD BE SPECIFIED
C FOR ALL ATOMS. THE MOLECULE NUMBER IS AN INTEGER THAT IS
C USED TO DIVIDE THE ATOMS INTO GROUPS SO THAT EACH GROUP
C MAY BE GIVEN ITS OWN SURFACE. THESE GROUPS NEED NOT
C CORRESPOND TO ACTUAL MOLECULES, AS THE PROGRAM KNOWS
C NOTHING ABOUT BONDING. THE CHARACTERS TO THE RIGHT OF
C THESE SIX FIELDS ARE NOT READ AND MAY CONTAIN ANYTHING.
C
C THE OUTPUT FROM THIS PROGRAM CONSISTS OF TWO FILES,
C CALLED 'CONTACT' AND 'REENTRANT', CONTAINING THE CONTACT
C AND REENTRANT SURFACE POINTS.  ALL LINES IN BOTH FILES HAVE
C THE SAME FORMAT.  THE FIRST THREE FIELDS ARE THE ATOM
C NUMBERS OF THE ATOMS THE PROBE WAS TOUCHING WHEN IT
C GENERATED THE GIVEN SURFACE POINT.  THE FIRST NUMBER IS
C THE ATOM WHOSE VAN DER WAALS SURFACE THE POINT IS CLOSEST TO.
C THE FOURTH FIELD IS THE NUMBER OF ATOMS THE PROBE WAS
C TOUCHING. IF THIS NUMBER IS LESS THEN THREE, ONE OR BOTH
C OF THE SECOND AND THIRD FIELDS WILL BE ZERO. THE FIFTH, SIXTH
C AND SEVENTH FIELDS ARE THE COORDINATES OF THE SURFACE POINT.
C THE EIGHTH FIELD IS THE MOLECULAR AREA ASSOCIATED WITH
C THE SURFACE POINT.  THE NINTH, TENTH AND ELEVENTH FIELDS
C ARE A UNIT VECTOR PERPENDICULAR TO THE SURFACE POINTING IN
C THE DIRECTION OF THE PROBE CENTER.
C IF THE BURIED SURFACE FLAG EQUALS 2, THERE IS A '1' WRITTEN
C AT THE END OF THE RECORD FOR BURIED SURFACE POINTS, AND
C A '0' FOR ACCESSIBLE POINTS. THE OUTPUT FORMAT IS:
C (3I5,I2,3F9.3,4F7.3,I2)
C THERE IS ALSO A SHORT OUTPUT FORMAT: (3I5,I2,3F9.3,I2).
C THE CORRESPONDING BINARY RECORDS ARE:
C (4I*2,7R*4,I*2) AND (4I*2,3R*4,I*2)
C
C THE CONTACT FILE IS GENERATED IN ATOM NUMBER ORDER.
C THE REENTRANT FILE SHOULD BE SORTED
C INTO ATOM NUMBER ORDER AND THEN MERGED WITH THE CONTACT FILE
C USING THE SORT/MERGE UTILITY PROGRAMS AVAILABLE AT YOUR
C INSTALLATION.  THEN ALL THE SURFACE POINTS BELONGING TO A
C GIVEN ATOM WILL BE IN A CONTIGUOUS SERIES OF RECORDS.
C
C EXAMPLE COMMAND FILE FOR VAX-11/780:
C
C $ ASSIGN PARM.DAT  FOR001
C $ ASSIGN PROTEIN.RAD FOR002
C $ ASSIGN INSULIN.ATM FOR003
C $ RUN MS
C $ DELETE BEFORE.DAT;*
C $ SORT/KEY=(POSITION=1,SIZE=5) REENTRANT.DAT SORTED.DAT
C $ DELETE REENTRANT.DAT;*
C $ MERGE/KEY=(POSITION=1,SIZE=5) CONTACT.DAT,SORTED.DAT INSULIN.SRF
C $ DELETE CONTACT.DAT;*, SORTED.DAT;*
C
C THE PROGRAM HAS THE ABILITY TO CALCULATE THE
C VAN DER WAALS SURFACE
C OF A MOLECULE SIMPLY BY SPECIFYING A PROBE RADIUS OF ZERO.
C THE REENTRANT CODE IS BYPASSED COMPLETELY AND THERE ARE NO
C BEFORE AND REENTRANT FILES. FOR A PROBE RADIUS OF ZERO
C THE VAN DER WAALS SURFACE AND THE CONTACT SURFACE
C ARE EQUIVALENT.
C
C THE FLOW OF THE PROGRAM MAY BE DESCRIBED IN GENERAL TERMS
C AS FOLLOWS. FIRST ALL THE INPUT IS READ. THEN THE CONTACT
C AND REENTRANT SURFACE IS GENERATED. THE CONTACT SURFACE
C IS IN ITS FINAL FORM, BUT THE REENTRANT SURFACE IS
C WRITTEN TO A TEMPORARY FILE, CALLED 'BEFORE'.
C EACH REENTRANT PROBE POSITION IS WRITTEN TO THIS FILE,
C FOLLOWED BY ALL ITS SURFACE POINTS.
C AFTER ALL THE CONTACT AND REENTRANT SURFACE HAS BEEN GENERATED,
C THE 'BEFORE' FILE IS READ AND A FINAL REENTRANT SURFACE FILE IS
C WRITTEN WHICH CONTAINS ALL THE REENTRANT SURFACE POINTS
C NOT LYING WITHIN ANY REENTRANT PROBE.
C
C
C SOMETIMES IT IS DESIRABLE TO CALCULATE THE SURFACE OF ONLY
C PART OF A MOLECULE. ONE CANNOT SIMPLY REMOVE THE REMAINING
C ATOMS FROM THE INPUT FILE AS THIS WILL GENERATE FALSE
C SURFACES. ONE COULD CALCULATE A SURFACE FOR THE ENTIRE
C MOLECULE AND THEN EDIT OUT THAT PART OF THE SURFACE BELONGING
C TO THE ATOMS OF INTEREST, BUT THIS IS A NEEDLESS
C WASTE OF COMPUTER TIME.  THE PROPER WAY TO ACCOMPLISH THIS
C TASK IS TO PLACE THE PROBE NEXT TO THE ATOMS WHOSE SURFACE
C IS REQUESTED AND TO USE THE REMAINING ATOMS ONLY FOR
C COLLISION CHECKS SO THAT FALSE SURFACES WILL NOT BE
C GENERATED. WHEN THE PROBE IS PLACED NEXT TO TWO OR THREE
C ATOMS, ONLY ONE OF THESE NEED BE AN ATOM WHOSE SURFACE
C IS REQUESTED. ONLY THAT PART OF THE ARC OR SPHERICAL
C TRIANGLE THAT BELONGS TO THE ATOMS WHOSE SURFACE IS
C REQUESTED WILL BE WRITTEN AS OUTPUT.
C
C THIS PROGRAM ALLOWS THE CALCULATION OF INDIVIDUAL SURFACES
C FOR SEVERAL INTERACTING MOLECULES. THIS MAY BE DONE WITH
C OR WITHOUT THE BURIED SURFACE OPTION.
C
C THIS PROGRAM SHOULD BE COMPILED WITH INTEGER*4 AS THE DEFAULT
C IT USES NO INCLUDE FILES OR LIBRARIES
C
C
C MAXATM     MAXIMUM NUMBER OF ATOMS
C MAXTYP     MAXIMUM NUMBER OF ATOM TYPES
C MAXNBR     MAXIMUM NUMBER OF NEIGHBORS AN ATOM MAY HAVE
C MAXSPH     MAXIMUM NUMBER OF SURFACE POINTS ON A SPHERE
C MAXCIR     MAXIMUM NUMBER OF SURFACE POINTS ON A CIRCLE
C MAXARC     MAXIMUM NUMBER OF SURFACE POINTS ON AN ARC
C MAXPPP     MAXIMUM NUMBER OF SURFACE POINTS PER PROBE
C MAXYON     MAXIMUM NUMBER OF YON PROBES
C MAXVIC     MAXIMUM NUMBER OF VICTIM PROBES
C MAXEAT     MAXIMUM NUMBER OF EATERS OF A PROBE'S SURFACE
C MAXCUB     MAXIMUM NUMBER OF CUBES IN ONE DIRECTION
C
C MAXATM MUST BE GREATER THAN OR EQUAL TO MAXYON
C BECAUSE THEY SHARE THE SAME CUBING ARRAYS
C
C

        PARAMETER (MAXATM=15000)
        PARAMETER (MAXTYP=30)
        PARAMETER (MAXNBR=2000)
        PARAMETER (MAXSPH=1000)
        PARAMETER (MAXCIR=1000)
        PARAMETER (MAXARC=1000)
        PARAMETER (MAXPPP=1000)
        PARAMETER (MAXYON=2000)
        PARAMETER (MAXVIC=6000)
        PARAMETER (MAXEAT=1000)
        PARAMETER (MAXCUB=40)


C
C
C ATOM TYPE ARRAYS
C
C ITYPE     ATOM TYPE NUMBER
C RTYPE     VAN DER WAALS RADIUS
C NUA       NUMBER OF UNIT VECTORS ON SPHERE
C
C DIMENSIONED ONE MORE IN CASE INPUT FILE IS TOO LONG
        DIMENSION ITYPE(MAXTYP+1),RTYPE(MAXTYP+1)
        DIMENSION NUA(MAXTYP)
C
C ARRAYS FOR ALL ATOMS
C
C CO        ATOMIC COORDINATES
C IAS       SURFACE REQUEST NUMBER
C IAT       ATOM ITYPE
C MOLNUM    MOLECULE NUMBER
C RAD       RADIUS
C SRS       SOME REENTRANT SURFACE
C
C DIMENSION ARRAYS 1 MORE IN CASE INPUT FILE IS TOO LONG
        DIMENSION CO(3,MAXATM+1)
        INTEGER*2 IAS(MAXATM+1),MOLNUM(MAXATM+1)
        INTEGER*2 IAT(MAXATM+1)
        DIMENSION RAD(MAXATM)
        LOGICAL*1 SRS(MAXATM)
C
C CUBE ARRAYS
C
C ICO       INTEGER CUBE COORDINATES
C ICUPTR    POINTER TO NEXT ATOM IN CUBE
C COMIN     MINIMUM ATOMIC COORDINATES (CUBE CORNER)
C ICUBE     POINTER TO FIRST ATOM IN LIST FOR CUBE
C SCUBE     SOME ATOM WITH SRN=2 IN CUBE
C SSCUBE    SOME ATOM WITH SRN=2 IN CUBE OR ADJOINING CUBES
C
        INTEGER*2 ICO(3,MAXATM),ICUPTR(MAXATM)
        DIMENSION COMIN(3)
        INTEGER*2 ICUBE(MAXCUB,MAXCUB,MAXCUB)
        LOGICAL*1 SCUBE(MAXCUB,MAXCUB,MAXCUB)
        LOGICAL*1 SSCUBE(MAXCUB,MAXCUB,MAXCUB)
C
C NEIGHBOR ARRAYS
C
C INBR      ATOM NUMBER
C CNBR      COORDINATES
C RNBR      RADIUS
C SNBR      TRUE IF SRN = 2 FOR NEIGHBOR
C MNBR      MUTUAL NEIGHBOR OF IATOM AND JATOM
C MOLNBR    MOLECULE NUMBER
C ERNBR     EXPANDED RADIUS (RNBR + RP)
C DISNBR    DISTANCE FROM NEIGHBOR TO IATOM
C LKNBR     LINK TO NEXT FARTHEST OUT NEIGHBOR
C ITNL      TEMPORARY NEIGHBOR LIST (BEFORE SORT)
C
        INTEGER*2 INBR(MAXNBR)
        DIMENSION CNBR(3,MAXNBR),RNBR(MAXNBR)
        LOGICAL*1 SNBR(MAXNBR),MNBR(MAXNBR)
        INTEGER*2 MOLNBR(MAXNBR)
        DIMENSION ERNBR(MAXNBR)
        DIMENSION DISNBR(MAXNBR)
        INTEGER*2 LKNBR(MAXNBR)
        INTEGER*2 ITNL(MAXNBR)
C
C CIRCLE AND SPHERE UNIT VECTOR ARRAYS
C
C UP        UNIT VECTORS FOR PROBE
C UA        UNIT VECTORS FOR ATOM
C EVA       EXTENDED VECTORS FOR ATOM
C CIRCLE    POINTS ON A CIRCLE
C
        DIMENSION UP(3,MAXSPH)
        DIMENSION UA(3,MAXSPH,MAXTYP),EVA(3,MAXSPH,MAXTYP)
        DIMENSION CIRCLE(3,MAXCIR)
C
C CI        COORDINATES OF ATOM I
C CJ        COORDINATES OF ATOM J
C CK        COORDINATES OF ATOM K
C SI        SRN = 2 FOR ATOM I
C SJ        SRN = 2 FOR ATOM J
C SK        SRN = 2 FOR ATOM K
C
        DIMENSION CI(3), CJ(3), CK(3)
        LOGICAL SI,SJ,SK,SNS
C
C GEOMETRIC CONSTRUCTION VECTORS
C
C VIJ       VECTOR FROM ATOM I TO ATOM J
C UIJ       UNIT VECTOR OF VIJ
C Q,T       TWO PERPENDICULAR VECTORS IN THE SADDLE PLANE
C CIJK      CENTER OF CIRCLE OF INTERSECTION OF EXPANDED SPHERE
C           OF ATOM K WITH THE SADDLE PLANE OF ATOMS I AND J
C VIJK      VECTOR FROM TORUS CENTER TO CIJK
C UIJK      UNIT VECTOR OF VIJK
C BIJ       TORUS CENTER
C AIJ       STARTING ALTITUDE VECTOR FROM TORUS CENTER
C BIJK      BASE POINT FOR ATOMS I, J AND K
C AIJK      ALTITUDE VECTOR FOR ATOMS I, J AND K
C AIJP      ALTITUDE VECTOR TO PROBE (ROTATED)
C A         ALTITUDE VECTOR, GENERAL, USED IN ORSR
C P         PROBE COORDINATES (GENERAL, USED IN ORSR)
C PIJP      CENTER OF PROBE PLACED TANGENT TO ATOMS I AND J
C PIJ       STARTING CENTER OF PROBE TANGENT TO ATOMS I AND J
C PIJK      PROBE PLACED TANGENT TO ATOMS I, J AND K
C PIPT      PROBE PLACED TANGENT TO ATOM I
C VPI       VECTOR FROM PROBE CENTER TO CONTACT POINT WITH ATOM I
C VPJ       VECTOR FROM PROBE CENTER TO CONTACT POINT WITH ATOM J
C VPK       VECTOR FROM PROBE CENTER TO CONTACT POINT WITH ATOM K
C VPS0      STARTING ARC POINTS RELATIVE TO PROBE CENTER
C VBS0      STARTING ARC POINTS RELATIVE TO TORUS CENTER
C VBS       ROTATED ARC POINT RELATIVE TO TORUS CENTER
C ARCA      AREA OF ARC POINT
C AYON      ARC POINT ON YON SIDE OF SYMMETRY ELEMENT
C VECTOR    TEMPORARY VECTOR STORAGE
C
C
        DIMENSION VIJ(3),UIJ(3),Q(3),T(3),CIJK(3),VIJK(3),UIJK(3)
        DIMENSION BIJ(3),AIJ(3),BIJK(3),AIJK(3,2),AIJP(3,2),A(3)
        DIMENSION P(3),PIJ(3),PIJP(3,2),PIJK(3,2),PIPT(3)
        DIMENSION VPI(3),VPJ(3),VPK(3)
        DIMENSION VPS0(3,MAXARC),VBS0(3,MAXARC,2),VBS(3),ARCA(MAXARC)
        DIMENSION VECTOR(3)
C
C G         UIJ, Q, T FRAME FOR TORUS
C H         ROTATION ABOUT X-AXIS
C GHGT      ROTATION ABOUT UIJ AXIS
C POW       POWERS OF GHGT
C
C ROTATION MATRICES
        DIMENSION G(3,3),H(3,3),GHGT(3,3),POW(3,3)
C
C S         SURFACE POINTS FOR PROBE
C TORUS     SURFACE POINTS FOR TORUS
C N1        ATOM SURFACE POINT IS ON OR CLOSEST TO
C N2,N3     OTHER ATOMS PROBE IS TOUCHING
C YON       WHETHER POINT LIES ON YON SIDE OF SYMMETRY ELEMENT
C
C REENTRANT PROBE RECORD
        DIMENSION S(3,MAXPPP),TORUS(MAXPPP)
        INTEGER*2 N1(MAXPPP),N2(MAXPPP),N3(MAXPPP)
        LOGICAL*1 YON(MAXPPP)
        INTEGER*2 IMOL,NP
C
C BOTH      BOTH PROBE POSITIONS FREE OF COLLISIONS
C PAIR      THIS MEMBER OF PAIR FREE FROM COLLISIONS
C YONPRB    PROBE CROSSES SYMMETRY ELEMENT
C FOUND     SEARCH FLAG
C
C LOGICAL VARIABLES
        LOGICAL BOTH,PAIR(2),AYON(MAXARC)
        LOGICAL FOUND
        LOGICAL*1 YONPRB
C
C ASCII     ASCII OUTPUT RECORDS
C LONG      LONG OUTPUT RECORDS
C
        LOGICAL ASCII,LONG
C
C ORSR FOR NON-SYMMETRY-RELATED PROBES
C THE FACTOR OF THREE FOR THE VICTIM ARRAYS
C IS BASED UPON EXPERIENCE
C
C PY        CENTER OF YON PROBE
C AY        ALTITUDE VECTOR OF YON PROBE
C PV        CENTER OF VICTIM PROBE
C AV        ALTITUDE VECTOR OF VICTIM PROBE
C IVIC      LIST OF PROBE NUMBERS OF VICTIMS
C IVICP     POINTER TO NEXT VICTIM WITH SAME HASH
C MOLYON    MOLECULE NUMBER OF YON PROBE
C MOLVIC    MOLECULE NUMBER OF VICTIM PROBE
C EAT       COORDINATES OF EATERS OF PROBE
C
        DIMENSION PY(3,MAXYON),AY(3,MAXYON)
        DIMENSION PV(3,MAXVIC),AV(3,MAXVIC)
        INTEGER*2 IVIC(MAXVIC),IVICP(MAXVIC)
        INTEGER*2 MOLYON(MAXYON),MOLVIC(MAXVIC)
        DIMENSION EAT(3,MAXEAT)
C
C MULTIPLE-MOLECULE VARIABLES
C
C BURY      PROBE POSITION IS BURIED
C
        LOGICAL*1 BURY
C
C COUNTERS
C
C NIAS      NUMBER OF ATOMS WITH GIVEN SRN
C NSHAPE    NUMBER OF SURFACE POINTS WITH GIVEN SHAPE
C NLOST     NUMBER OF SURFACE POINTS LOST IN NON-SYMMETRY ORSR
C
        DIMENSION NIAS(3)
        INTEGER*4 NSHAPE(3),NLOST(3)
C
C OUTPUT VARIABLES
C
C IATNUM   ATOM NUMBERS
C ISHAPE   SURFACE SHAPE NUMBER
C IB       BURIED SURFACE FLAG
C
        INTEGER*2 IATNUM(3),ISHAPE,IB
        character* (160) filnam
        character* (160) before
        character* (160) workdir
        character* (80) envir
C	character*10 number
	REAL OUTCO(3),OUTVEC(3)
C
C LOGICAL FUNCTIONS
C
        LOGICAL COLLID
        LOGICAL BURIED

C
C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
C
C INITIALIZE VALUE OF PI
C
        PI = ACOS(-1.0)
C
c
c *** 10-30-87 jwick: on clover, cmd line arguments start with 1 and do not
c                      return the program name as the first argument
c
	ia = iargc()
	if (ia.gt.0) then
	    call getarg (1, filnam)
	    if (filnam.eq.'help') then
      print '(a)','*******************************************'
      print '(a)','** MS program with DOWSER  modifications: (Feb 98)'
      print '(a)','**  usage: xms ='
      print '(a)','       Use hardwired DOWSER files'
      print '(a)','       with runtime parameters and radii'

      print '(a)','**     or: xms Argument1 ='
      print '(a)','       Use Argument1 for parameters and'
      print '(a)','       hardwired DOWSER file with runtime radii'

      print '(a)','**     or: xms Argument1 Argument2 ='
      print '(a)','       Use Argument1 for parameters'
      print '(a)','       and Argument2 for runtime radii'

      print '(a)','**     or: xms Argument1 Argument2 Argument3 ='
      print '(a)','       Use Argument1 for parameters'
      print '(a)','       and Argument2 for runtime radii'
      print '(a)','       and Argument3 for name of working directory'
      print '(a)','*******************************************'
		stop
	    endif
	endif

	if (iargc().lt.2) then
	    call getenv('DOWSER',envir)
	    do i=1,80
	      if (envir(i:i) .eq. ' ') goto 23000
	    enddo
	endif
23000	continue

 	if(iargc().gt.0) then
	    call getarg (1, filnam)
	else
	    filnam = envir(1:i-1)//'/DATA/ms.param'
	endif
c
c
c OPEN INPUT FILES
        OPEN(UNIT=1,file=filnam, STATUS='OLD',FORM='FORMATTED')

 	if(iargc().gt.1) then
	    call getarg (2, filnam)
	else
	    filnam = envir(1:i-1)//'/DATA/ms.rad'
	endif
        OPEN(UNIT=2,file=filnam, STATUS='OLD',FORM='FORMATTED')
c
c
c OPEN OUTPUT FILES
	if (iargc().gt.2) then 
	    call getarg (3, workdir)
	    do jwdlength=1,80
	      if (workdir(jwdlength:jwdlength) .eq. ' ') goto 23001
	    enddo
23001	continue
	    filnam = workdir(1:jwdlength-1)//'/XMS.log'
	else
	    filnam = 'XMS.log'
	endif
        OPEN(UNIT=7,file=filnam, STATUS='UNKNOWN')
C
C READ REQUESTED SURFACE POINT DENSITY, PROBE RADIUS, BURY FLAG
C AND OUTPUT FORMAT
c
C
       READ (1,50) D, RP, IBURY, IABLS
50      FORMAT(2F10.5,I5,I5)
C
C INPUT VALUE CHECKING
C CHECK FOR NEGATIVE PROBE RADIUS
        IF (RP .LT. 0.0) CALL ERROR(120,0,RP)
C CHECK BURIED SURFACE FLAG
        IF (IBURY .LT. 0 .OR. IBURY .GT. 2) CALL ERROR(127,IBURY,0.0)
C SET UP OUTPUT FORMAT LOGICAL VARIABLES
        ASCII = (0 .EQ. MOD(IABLS,2))
        LONG = (0 .EQ. MOD(IABLS/2,2))
C
C INITIALIZATION
        NTYPE = 1
        RADMAX = 0.0
C READ ATOM TYPES WITH THEIR RADII
100     CONTINUE
        READ (2,150,END=300) ITYPE(NTYPE),RTYPE(NTYPE)
150     FORMAT(I5,F10.5)
C ATOM RADII MUST BE ZERO OR POSITIVE
        IF (RTYPE(NTYPE) .LT. 0.0) CALL ERROR(140,NTYPE,RTYPE(NTYPE))
C CHECK FOR ATOM TYPE OVERFLOW
        IF (NTYPE .GT. MAXTYP) CALL ERROR(130,NTYPE,0.0)
C CHECK FOR NEW MAXIMUM RADIUS
        IF (RTYPE(NTYPE) .GT. RADMAX) RADMAX = RTYPE(NTYPE)
C NUMBER OF UNIT VECTORS DEPENDS ON SPHERE AREA AND INPUT DENSITY
        NUA(NTYPE) = (4*PI*RTYPE(NTYPE)**2) * D
C DECREASE TO ARRAY SIZE IF TOO LARGE
        IF (NUA(NTYPE) .GT. MAXSPH) NUA(NTYPE) = MAXSPH
        IF (NUA(NTYPE) .LT. 1) NUA(NTYPE) = 1
C CREATE UNIT VECTOR ARRAYS
        CALL GENUN(UA(1,1,NTYPE),NUA(NTYPE))
C COMPUTE EXTENDED VECTORS FOR LATER PROBE PLACEMENT
        DO 250 ISPH = 1,NUA(NTYPE)
           DO 200 K = 1,3
         EVA(K,ISPH,NTYPE) = (RTYPE(NTYPE) + RP) * UA(K,ISPH,NTYPE)
200        CONTINUE
250     CONTINUE
C ONE MORE ATOM TYPE
        NTYPE = NTYPE + 1
        GO TO 100
300     CONTINUE
	WRITE(7,'(A7,$)')'MS stderr '
	write(7,*)' read protein.rad '
c DECREMENT ON END OF FILE
        NTYPE = NTYPE - 1
C
C CALCULATE WIDTH OF CUBE FROM MAXIMUM ATOM RADIUS AND PROBE RADIUS
        WIDTH = 2 * (RADMAX + RP)
C INITIALIZE SRN COUNTERS AND COORDINATE MINIMA
        DO 350 K = 1,3
           NIAS(K) = 0
350     CONTINUE
        DO 400 K = 1,3
           COMIN(K) = 1000000.0
400     CONTINUE
        N = 1
C
C READ THE ATOM COORDINATES, TYPES, SURFACE REQUEST NUMBERS AND
C MOLECULE NUMBERS
C
450     READ (5,500,END=750) (CO(K,N),K=1,3),IAT(N),IAS(N),MOLNUM(N)
500     FORMAT(3F10.5,3I5)
C
C CHECK FOR ATOM OVERFLOW
        IF (N .GT. MAXATM) CALL ERROR(150,N,0.0)
C CHECK SURFACE REQUEST NUMBER
        IF (IAS(N) .LT. 0 .OR. IAS(N) .GT. 2) CALL ERROR(160,N,0.0)
C CHECK FOR NEW COORDINATE MINIMA
        DO 550 K = 1,3
           IF (CO(K,N) .LT. COMIN(K)) COMIN(K) = CO(K,N)
550     CONTINUE
C INCREMENT COUNTERS FOR EACH SRN TYPE
        DO 600 K = 1,3
           IF (IAS(N) .EQ. K-1) NIAS(K) = NIAS(K) + 1
600     CONTINUE
C WE DON'T CARE WHETHER IGNORED ATOMS HAVE A RADIUS
        IF (IAS(N) .EQ. 0) GO TO 700
C
C LOOK FOR THIS ATOM TYPE NUMBER SO WE MAY ASSIGN A RADIUS
        FOUND = .FALSE.
        DO 650 I = 1, NTYPE
           IF (IAT(N) .NE. ITYPE(I)) GO TO 650
           FOUND = .TRUE.
C TRANSFER RADIUS FROM ATOM TYPE TO ATOM RADIUS ARRAY
           RAD(N) = RTYPE(I)
C END OF ATOM TYPE SEARCH LOOP
650     CONTINUE
C CHECK WHETHER ATOM TYPE FOUND
        IF (.NOT. FOUND) CALL ERROR(170,N,0.0)
700     CONTINUE
C STORE CURRENT NUMBER OF ATOMS READ
        NATOM = N
C INCREMENT INDEX FOR NEXT READ
        N = N + 1
        GO TO 450
C
C GO HERE ON EOF OF ATOM INPUT FILE
750     CONTINUE
C CLOSE ALL INPUT FILES
	WRITE(7,'(A7,$)') 'MS stderr '
        write(7,*)'finished reading ',natom,' atoms '
        CLOSE(2)
        CLOSE(3)
C
C     SET UP CUBE ARRAYS
C     FIRST THE INTEGER COORDINATE ARRAYS
        DO 850 I = 1,NATOM
           DO 800 K = 1,3
              ICO(K,I) = (CO(K,I)-COMIN(K))/WIDTH + 1
              IF (ICO(K,I) .LT. 1) STOP 'CUBE COORDINATE TOO SMALL'
              IF (ICO(K,I) .GT. MAXCUB)
     1         STOP 'CUBE COORDINATE TOO LARGE'
800        CONTINUE
850     CONTINUE
C
C INITIALIZE HEAD POINTER AND SRN=2 ARRAYS
        DO 1000 K = 1,MAXCUB
           DO 950 J = 1,MAXCUB
              DO 900 I = 1,MAXCUB
                 ICUBE(I,J,K) = 0
                 SCUBE(I,J,K) = .FALSE.
                 SSCUBE(I,J,K) = .FALSE.
900           CONTINUE
950        CONTINUE
1000    CONTINUE
C
C INITIALIZE LINKED LIST POINTERS
        DO 1050 I = 1,NATOM
           ICUPTR(I) = 0
1050    CONTINUE
C
C SET UP HEAD AND LATER POINTERS FOR EACH ATOM
        DO 1250 IATOM = 1,NATOM
C SKIP ATOMS WITH SURFACE REQUEST NUMBERS OF ZERO
           IF (IAS(IATOM) .EQ. 0) GO TO 1250
           I = ICO(1,IATOM)
           J = ICO(2,IATOM)
           K = ICO(3,IATOM)
           IF (ICUBE(I,J,K) .LE. 0) THEN
C     FIRST ATOM IN THIS CUBE
              ICUBE(I,J,K) = IATOM
           ELSE
C     ADD TO END OF LINKED LIST
              IPTR = ICUBE(I,J,K)
1100          CONTINUE
C CHECK FOR DUPLICATE COORDINATES
              D2 = DIST2(CO(1,IATOM),CO(1,IPTR))
              IF (D2 .LE. 0.0) THEN
                 IAS(IATOM) = 0
	WRITE(7,'(A7)')'MS stderr '
                 WRITE (7,1150) IATOM,IPTR
1150             FORMAT(1X,'ATOM',I5,' DROPPED (SAME CO AS ',I5,')')
                 GO TO 1250
              END IF
              IF (ICUPTR(IPTR) .LE. 0) GO TO 1200
C MOVE ON DOWN THE LIST
              IPTR = ICUPTR(IPTR)
              GO TO 1100
1200          CONTINUE
C STORE ATOM NUMBER
              ICUPTR(IPTR) = IATOM
           END IF
C CHECK FOR SURFACED ATOM
           IF (IAS(IATOM) .EQ. 2) SCUBE(I,J,K) = .TRUE.
1250    CONTINUE
C
C CHECK FOR 3 X 3 X 3 WITH SOME SRN = 2
C
        DO 1550 K = 1,MAXCUB
           DO 1500 J = 1,MAXCUB
              DO 1450 I = 1,MAXCUB
                 IF (ICUBE(I,J,K) .EQ. 0) GO TO 1450
C CHECK WHETHER THIS CUBE OR ANY ADJACENT CUBE HAS SRN = 2
                 DO 1400 K1 = K-1,K+1
                    IF (K1 .LT. 1 .OR. K1 .GT. MAXCUB) GO TO 1400
                    DO 1350 J1 = J-1,J+1
                       IF (J1 .LT. 1 .OR. J1 .GT. MAXCUB) GO TO 1350
                       DO 1300 I1 = I-1,I+1
                       IF (I1 .LT. 1 .OR. I1 .GT. MAXCUB) GO TO 1300
                          IF (SCUBE(I1,J1,K1)) SSCUBE(I,J,K) = .TRUE.
1300                   CONTINUE
1350                CONTINUE
1400             CONTINUE
1450          CONTINUE
1500       CONTINUE
1550    CONTINUE
C
C INITIALIZATION
C MAXIMUM NUMBER OF NEIGHBORS ANY ATOM HAS
        MAXNB = 0
C NUMBERS OF SURFACE POINTS
        DO 1600 K = 1,3
           NSHAPE(K) = 0
           NLOST(K) = 0
1600    CONTINUE
C NUMBER OF YON PROBES
        NY = 0
C CONTACT AND REENTRANT AREAS
        AREAC = 0.0
        AREAR = 0.0
C
C WRITE OUT MESSAGES
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,1650) NATOM
1650    FORMAT(1X,I5,1X,'ATOMS')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,1700) NIAS(1)
1700    FORMAT(1X,I5,1X,'OMITTED')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,1750) NIAS(2)
1750    FORMAT(1X,I5,1X,'COLLISION ONLY')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,1800) NIAS(3)
1800    FORMAT(1X,I5,1X,'SURFACE')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,1850) D,RP
1850    FORMAT(1X,'SURFACE POINT DENSITY = ',F10.5,5X,
     1    'PROBE RADIUS = ',F10.5)
        IF (IBURY .EQ. 1) WRITE (7,1900)
1900    FORMAT('MS stderr BURIED SURFACE ONLY')
        IF (IBURY .EQ. 2) WRITE (7,1950)
1950    FORMAT('MS stderr BURIED SURFACE FLAGGED')
        IF (.NOT. ASCII) WRITE (7,2000)
2000    FORMAT('MS stderr BINARY CONTACT AND REENTRANT FILES')
        IF (.NOT. LONG) WRITE (7,2050)
2050    FORMAT('MS stderr SHORT OUTPUT RECORDS')
C STOP IF DENSITY IS NOT POSITIVE
        IF (D .LE. 0.0) STOP 'NON-POSITIVE DENSITY'
C SKIP PROBE AND CIRCLE SETUP IF VAN DER WAALS SURFACE
        IF (RP .EQ. 0.0) GO TO 2150
C
C SET UP PROBE SPHERE AND CIRCLE
        NUP = (4 * PI * RP ** 2) * D
        IF (NUP .LT. 1) NUP = 1
        IF (NUP .GT. MAXSPH) NUP = MAXSPH
        CALL GENUN(UP,NUP)
        NCIRC = (2 * PI * RP) * SQRT(D)
        IF (NCIRC .LT. 1) NCIRC = 1
        IF (NCIRC .GT. MAXCIR) NCIRC = MAXCIR
        DO 2100 I = 1, NCIRC
           FI = (2 * PI * (I-1))/NCIRC
           CIRCLE(1,I) = RP * COS(FI)
           CIRCLE(2,I) = RP * SIN(FI)
           CIRCLE(3,I) = 0.0
2100    CONTINUE
C
C OPEN BEFORE FILE FOR WRITING
	if (iargc().gt.2) then 
	    before = workdir(1:jwdlength-1)//'/BEFORE'
	else
	    before = 'BEFORE'
	endif
        OPEN(UNIT=4,file=before, FORM='UNFORMATTED',STATUS='NEW')
        REWIND(4)
C SKIP TO HERE IF NO REENTRANT SURFACE WILL BE CALCULATED
2150    CONTINUE
C INITIALIZE SOME REENTRANT SURFACE TO FALSE FOR EACH ATOM
        DO 2200 IATOM = 1,NATOM
           SRS(IATOM) = .FALSE.
2200    CONTINUE
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
C BIG LOOP FOR EACH ATOM
        DO 5650 IATOM = 1, NATOM
C SKIP IGNORED ATOMS
           IF (IAS(IATOM) .EQ. 0) GO TO 5650
C
           ICI = ICO(1,IATOM)
           ICJ = ICO(2,IATOM)
           ICK = ICO(3,IATOM)
C SKIP IATOM IF ITS CUBE AND ADJOINING CUBES CONTAIN ONLY BLOCKERS
           IF (.NOT. SSCUBE(ICI,ICJ,ICK)) GO TO 5650
C TRANSFER VALUES FROM LARGE ARRAYS TO IATOM VARIABLES
           RI = RAD(IATOM)
           SI = IAS(IATOM) .EQ. 2
           DO 2250 K = 1,3
              CI(K) = CO(K,IATOM)
2250       CONTINUE
           IMOL = MOLNUM(IATOM)
C
C GATHER THE NEIGHBORING ATOMS OF IATOM
C INITIALIZE NUMBER OF NEIGHBORS, AND NUMBER OF NEIGHBORS IN THE
C SAME MOLECULE AS ATOM I
           NNBR = 0
           NIMOL = 0
C INITIALIZE SRN = 2 FOR SOME NEIGHBOR TO FALSE
           SNS = .FALSE.
C SAVE A LITTLE TIME FOR DISTANCE CHECK
           SUMI = 2 * RP + RI
C CHECK IATOM CUBE AND ADJACENT CUBES FOR NEIGHBORING ATOMS
           DO 2550 JCK = ICK-1,ICK+1
              IF (JCK .LT. 1 .OR. JCK .GT. MAXCUB) GO TO 2550
              DO 2500 JCJ = ICJ-1,ICJ+1
                 IF (JCJ .LT. 1 .OR. JCJ .GT. MAXCUB) GO TO 2500
                 DO 2450 JCI = ICI-1,ICI+1
                    IF (JCI .LT. 1 .OR. JCI .GT. MAXCUB) GO TO 2450
                    JATOM = ICUBE(JCI,JCJ,JCK)
2300                CONTINUE
C CHECK FOR END OF LINKED LIST FOR THIS CUBE
                    IF (JATOM .LE. 0) GO TO 2400
C DISTANCE CHECK
                    SUM = SUMI + RAD(JATOM)
                    VECT1 = ABS(CO(1,JATOM) - CI(1))
                    IF (VECT1 .GE. SUM) GO TO 2350
                    VECT2 = ABS(CO(2,JATOM) - CI(2))
                    IF (VECT2 .GE. SUM) GO TO 2350
                    VECT3 = ABS(CO(3,JATOM) - CI(3))
                    IF (VECT3 .GE. SUM) GO TO 2350
                    D2 = VECT1 ** 2 + VECT2 ** 2 + VECT3 ** 2
                    IF (D2 .GE. SUM ** 2) GO TO 2350
C IATOM IS NOT ITS OWN NEIGHBOR
                    IF (IATOM .EQ. JATOM) GO TO 2350
C WE HAVE A NEW NEIGHBOR
                    NNBR = NNBR + 1
C CHECK FOR NEIGHBOR OVERFLOW
                    IF (NNBR .GT. MAXNBR) CALL ERROR(210,NNBR,0.0)
C SAVE ATOM NUMBER IN TEMPORARY ARRAY
                    ITNL(NNBR) = JATOM
C CHECK WHETHER SURFACED NEIGHBOR IN SAME MOLECULE
                IF (IAS(JATOM) .EQ. 2 .AND. MOLNUM(JATOM) .EQ. IMOL)
     1       SNS = .TRUE.
C COUNT THE NUMBER OF ATOMS IN THE SAME MOLECULE AS IATOM
                    IF (IMOL .EQ. MOLNUM(JATOM)) NIMOL = NIMOL + 1
2350                CONTINUE
C GET NUMBER OF NEXT ATOM IN CUBE
                    JATOM = ICUPTR(JATOM)
                    GO TO 2300
2400                CONTINUE
2450             CONTINUE
2500          CONTINUE
2550       CONTINUE
C KEEP TRACK OF MAXIMUM NUMBER OF NEIGHBORS
C FOR ARRAY-DIMENSIONING PURPOSES
           IF (NNBR .GT. MAXNB) MAXNB = NNBR
C
C NO SURFACE FOR ATOM I IF BURIED ONLY FLAG SET AND
C THERE ARE NO NEIGHBORS FROM THE OTHER MOLECULES
           IF (IBURY .EQ. 1 .AND. NIMOL .EQ. NNBR) GO TO 5650
C
C NO SURFACE IF IATOM AND ALL NEIGHBOR ATOMS
C IN THE SAME MOLECULE HAVE SURFACE REQUEST NUMBERS < 2
           IF (.NOT. SI .AND. .NOT. SNS) GO TO 5650
C
C SET UP NEIGHBORS ARRAYS WITH JATOM IN INCREASING ORDER
C
C INITIALIZE MINIMUM NEIGHBOR ATOM NUMBER
           JMOLD = 0
           DO 2700 IUSE = 1,NNBR
              JMIN = NATOM + 1
              DO 2600 JNBR = 1,NNBR
C DON'T USE ONES ALREADY SORTED
                 IF (ITNL(JNBR) .LE. JMOLD) GO TO 2600
                 IF (ITNL(JNBR) .LT. JMIN) THEN
                    JMIN = ITNL(JNBR)
                    JMINBR = JNBR
                 END IF
2600          CONTINUE
              JMOLD = JMIN
              JNBR = JMINBR
              JATOM = ITNL(JNBR)
C TRANSFER ATOM NUMBER, COORDINATES, RADIUS, SURFACE REQUEST NUMBER,
C MOLECULE NUMBER, EXPANDED RADIUS, DISTANCE FROM IATOM
              INBR(IUSE) = JATOM
              DO 2650 K = 1,3
                 CNBR(K,IUSE) = CO(K,JATOM)
2650          CONTINUE
              RNBR(IUSE) = RAD(JATOM)
              SNBR(IUSE) = IAS(JATOM) .EQ. 2
              MOLNBR(IUSE) = MOLNUM(JATOM)
              ERNBR(IUSE) = RNBR(IUSE) + RP
              DISNBR(IUSE) = DIST2(CI,CNBR(1,IUSE))
C INITIALIZE LINK TO NEXT FARTHEST OUT NEIGHBOR
              LKNBR(IUSE) = 0
2700       CONTINUE
C SET UP A LINKED LIST OF NEIGHBORS IN ORDER OF
C INCREASING DISTANCE FROM IATOM
C INITIALIZE POINTER TO FIRST NEIGHBOR TO 0
           LKF = 0
C LOOK FOR NEIGHBOR IN SAME MOLECULE
C WE WANT ONLY ATOMS IN SAME MOLECULE FOR COLLISION CHECK
           DO 2750 L = 1,NNBR
              IF (IMOL .NE. MOLNBR(L)) GO TO 2750
              LKF = L
              GO TO 2800
2750       CONTINUE
           IF (LKF .EQ. 0) GO TO 3000
2800       CONTINUE
C PUT REMAINING NEIGHBORS IN LINKED LIST AT PROPER POSITION
           DO 2950 L = LKF+1,NNBR
              IF (IMOL .NE. MOLNBR(L)) GO TO 2950
              L1 = 0
              L2 = LKF
2850          CONTINUE
              IF (DISNBR(L) .LT. DISNBR(L2)) GO TO 2900
              L1 = L2
              L2 = LKNBR(L2)
              IF (L2 .NE. 0) GO TO 2850
2900          CONTINUE
C ADD TO LIST
              IF (L1 .EQ. 0) THEN
                 LKF = L
                 LKNBR(L) = L2
              ELSE
                 LKNBR(L1) = L
                 LKNBR(L) = L2
              END IF
2950       CONTINUE
3000       CONTINUE
C
C NO REENTRANT SURFACE WILL BE CALCULATED IF WE ARE
C CALCULATING THE VAN DER WAALS SURFACE
C INSTEAD OF THE MOLECULAR SURFACE
           IF (RP .EQ. 0.0) GO TO 5200
C NO REENTRANT SURFACE IF IATOM HAS NO NEIGHBORS
           IF (NIMOL .LE. 0) GO TO 5200
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C MEDIUM LOOP FOR EACH NEIGHBOR OF IATOM
C
           DO 5150 JNBR = 1,NNBR
              JATOM = INBR(JNBR)
C
C EACH PAIR OF ATOMS IS CONSIDERED ONLY ONCE
              IF (JATOM .LE. IATOM) GO TO 5150
C EACH MOLECULE GETS A SEPARATE SURFACE
              IF (IMOL .NE. MOLNBR(JNBR)) GO TO 5150
C
C TRANFER FROM NEIGHBOR ARRAYS TO JATOM VARIABLES
              RJ = RNBR(JNBR)
              SJ = SNBR(JNBR)
              DO 3050 K = 1,3
                 CJ(K) = CNBR(K,JNBR)
3050          CONTINUE
C
C HERE FOLLOW GEOMETRIC CALCULATIONS OF POINTS, VECTORS AND
C DISTANCES USED FOR PROBE PLACEMENT IN BOTH SADDLE AND
C CONCAVE REENTRANT SURFACE GENERATION
C
C CALCULATE THE INTERSECTION
C OF THE EXPANDED SPHERES OF IATOM AND JATOM
C THIS CIRCLE IS CALLED THE SADDLE CIRCLE
C THE PLANE IT LIES IN IS CALLED THE SADDLE PLANE
C
              DO 3100 K = 1,3
                 VIJ(K) = CJ(K) - CI(K)
3100          CONTINUE
C CREATE AN ORTHONORMAL FRAME
C WITH UIJ POINTING ALONG THE INTER-ATOMIC AXIS
C AND Q AND T DEFINING THE SADDLE PLANE
              IF (ANORM(VIJ) .LE. 0.0) THEN
	WRITE(6,'(A7,$)')'MS stderr '
                 WRITE (7,3150) IATOM,JATOM
3150             FORMAT(1X,'ATOMS',2I5,' HAVE THE SAME CENTER')
                 GO TO 5150
              END IF
              CALL VNORM(VIJ,UIJ)
              CALL VPERP(UIJ,Q)
              CALL CROSS(UIJ,Q,T)
C
C CALCULATE THE SADDLE CIRCLE CENTER AND RADIUS
              DIJ = ANORM(VIJ)
              F = 0.5*(1.0+((RI+RP)**2-(RJ+RP)**2)/DIJ**2)
C BASE POINT
              DO 3200 K = 1,3
                 BIJ(K) = CI(K) + F * VIJ(K)
3200          CONTINUE
              F1 = (RI+RJ+2*RP)**2 - DIJ**2
C SKIP TO BOTTOM OF MIDDLE LOOP IF ATOMS ARE TOO FAR APART
              IF (F1 .LE. 0.0) GO TO 5150
              F2 = DIJ**2 - (RI-RJ)**2
C SKIP TO BOTTOM OF MIDDLE LOOP IF ONE ATOM INSIDE THE OTHER
              IF (F2 .LE. 0.0) GO TO 5150
C HEIGHT (RADIUS OF SADDLE CIRCLE)
              HIJ = SQRT(F1*F2) / (2*DIJ)
C A STARTING ALTITUDE
              DO 3250 K = 1,3
                 AIJ(K) = HIJ * Q(K)
3250          CONTINUE
C
C
C CONCAVE REENTRANT SURFACE
C
C GATHER MUTUAL NEIGHBORS OF IATOM AND JATOM
              MUTUAL = 0
              DO 3300 KNBR = 1, NNBR
                 D2 = DIST2(CJ,CNBR(1,KNBR))
                 MNBR(KNBR) = D2 .LT. (2*RP+RJ+RNBR(KNBR))**2
     1    .AND. KNBR .NE. JNBR
                 IF (MNBR(KNBR)) MUTUAL = MUTUAL + 1
3300          CONTINUE
C
C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
C
C INNER LOOP FOR EACH MUTUAL NEIGHBOR OF IATOM AND JATOM
              ISHAPE = 3
              DO 4200 KNBR = 1,NNBR
                 IF (.NOT. MNBR(KNBR)) GO TO 4200
                 KATOM = INBR(KNBR)
C IATOM < JATOM < KATOM
                 IF (KATOM .LE. JATOM) GO TO 4200
                 SK = SNBR(KNBR)
C SKIP NEIGHBOR IF ALL THREE ATOM NOT MARKED TO BE SURFACED
                 IF (.NOT. (SI .OR. SJ .OR. SK)) GO TO 4200
C EACH MOLECULE GETS A SEPARATE SURFACE
                 IF (IMOL .NE. MOLNBR(KNBR)) GO TO 4200
C
C TRANFER FROM NEIGHBOR ARRAY TO KATOM VARIABLES
                 RK = RNBR(KNBR)
                 DO 3350 K = 1,3
                    CK(K) = CNBR(K,KNBR)
3350             CONTINUE
C
C CALCULATE INTERSECTION OF EXPANDED SPHERE OF KATOM
C WITH SADDLE PLANE. WE WILL CALL THIS THE KATOM CIRCLE.
C
C PROJECTION OF VECTOR,
C FROM KATOM TO A POINT ON THE SADDLE PLANE,
C ONTO IATOM-JATOM AXIS,
C IN ORDER TO GET DISTANCE KATOM IS FROM SADDLE PLANE
           DK = UIJ(1) * (BIJ(1)-CK(1)) + UIJ(2) * (BIJ(2)-CK(2)) +
     1UIJ(3) * (BIJ(3)-CK(3))
C
C CALCULATE RADIUS OF KATOM CIRCLE
                 RIJK = (RK+RP) ** 2 - DK ** 2
C SKIP CONCAVE CALCULATION IF NO INTERSECTION
                 IF (RIJK .LE. 0.0) GO TO 4200
                 RIJK = SQRT(RIJK)
C CALCULATE CENTER OF KATOM CIRCLE
                 DO 3400 K = 1,3
                    CIJK(K) = CK(K) + DK * UIJ(K)
3400             CONTINUE
C
C CALCULATE INTERSECTION OF THE KATOM CIRCLE WITH THE SADDLE CIRCLE
                 DO 3450 K = 1,3
                    VIJK(K) = CIJK(K) - BIJ(K)
3450             CONTINUE
                 DIJK = ANORM(VIJK)
                 IF (DIJK .LE. 0.0) THEN
	WRITE(6,'(A7,$)')'MS stderr '
                    WRITE (7,3500) IATOM,JATOM,KATOM
3500                FORMAT(1X,'ATOMS',3I5,' HAVE CONCENTRIC CIRCLES')
                    GO TO 4200
                 END IF
                 F = 0.5 * (1.0+(HIJ**2-RIJK**2)/DIJK**2)
C BASE POINT BIJK IS ON SYMMETRY PLANE AND SADDLE PLANE
                 DO 3550 K = 1,3
                    BIJK(K) = BIJ(K) + F * VIJK(K)
3550             CONTINUE
                 F1 = (HIJ+RIJK)**2 - DIJK**2
C SKIP TO BOTTOM OF INNER LOOP IF KATOM TOO FAR AWAY
                 IF (F1 .LE. 0.0) GO TO 4200
                 F2 = DIJK**2 - (HIJ-RIJK)**2
C SKIP TO BOTTOM OF INNER LOOP IF KATOM CIRCLE INSIDE SADDLE CIRCLE
C OR VICE-VERSA
                 IF (F2 .LE. 0.0) GO TO 4200
                 HIJK = SQRT(F1*F2) / (2*DIJK)
                 CALL VNORM(VIJK,UIJK)
C UIJ AND UIJK LIE IN THE SYMMETRY PLANE PASSING THROUGH THE ATOMS
C SO THEIR CROSS PRODUCT IS PERPENDICULAR TO THIS PLANE
                 CALL CROSS(UIJ,UIJK,AIJK)
C TWO ALTITUDES
                 DO 3600 K = 1,3
                    AIJK(K,1) = HIJK * AIJK(K,1)
                    AIJK(K,2) = - AIJK(K,1)
3600             CONTINUE
C
C PROBE PLACEMENT AT ENDS OF ALTITUDE VECTORS
                 DO 3700 IP = 1,2
                    DO 3650 K = 1,3
                       PIJK(K,IP) = BIJK(K) + AIJK(K,IP)
3650                CONTINUE
C COLLISION CHECK WITH MUTUAL NEIGHBORS
            PAIR(IP) = .NOT. COLLID(PIJK(1,IP),RP,CNBR,ERNBR,MNBR,
     1NNBR,MAXNBR,ISHAPE,JNBR,KNBR,MOLNBR,IMOL,LKF,LKNBR)
3700             CONTINUE
C IF NEITHER PROBE POSITION IS ALLOWED, SKIP TO BOTTOM OF INNER LOOP
                 IF (.NOT. PAIR(1) .AND. .NOT. PAIR(2)) GO TO 4200
                 BOTH = PAIR(1) .AND. PAIR(2)
C SOME REENTRANT SURFACE FOR ALL THREE ATOMS
                 SRS(IATOM) = .TRUE.
                 SRS(JATOM) = .TRUE.
                 SRS(KATOM) = .TRUE.
C
C GENERATE SURFACE POINTS
                 AREA = (4 * 3.14159 * RP ** 2)/NUP
                 DO 4150 IP = 1,2
                    IF (.NOT. PAIR(IP)) GO TO 4150
C GIVE IT SOME KIND OF VALUE, IN CASE WE DON'T CALL BURIED
                    BURY = .FALSE.
C ONLY CALL BURIED IF WE CARE WHAT THE ANSWER IS
           IF (IBURY .GT. 0) BURY = BURIED(PIJK(1,IP),RP,CNBR,RNB
     1R,MNBR,NNBR,MAXNBR,ISHAPE,JNBR,KNBR,MOLNBR,IMOL)
C SKIP IF NOT BURIED AND BURIED SURFACE ONLY FLAG SET
                    IF (IBURY .EQ. 1 .AND. .NOT. BURY) GO TO 4150
C DETERMINE WHETHER PROBE HAS SURFACE ON FAR SIDE OF PLANE
                    YONPRB = HIJK .LT. RP .AND. .NOT. BOTH
C CALCULATE VECTORS DEFINING SPHERICAL TRIANGLE
C THE VECTORS ARE GIVEN THE PROBE RADIUS AS A LENGTH
C ONLY FOR THE PURPOSE OF MAKING THE GEOMETRY MORE CLEAR
                    DO 3750 K = 1,3
                       VPI(K) = (CI(K) - PIJK(K,IP)) * RP / (RI + RP)
                       VPJ(K) = (CJ(K) - PIJK(K,IP)) * RP / (RJ + RP)
                       VPK(K) = (CK(K) - PIJK(K,IP)) * RP / (RK + RP)
3750                CONTINUE
                    SIGN = DET(VPI,VPJ,VPK)
C INITIALIZE NUMBER OF SURFACE POINTS WRITTEN
                    NP = 1
C GATHER POINTS ON PROBE SPHERE LYING WITHIN TRIANGLE
                 DO 4000 I = 1,NUP
C IF THE UNIT VECTOR IS POINTING AWAY FROM THE SYMMETRY PLANE
C THE SURFACE POINT CANNOT LIE WITHIN THE INWARD-FACING TRIANGLE
                  IF (DOT(UP(1,I),AIJK(1,IP)) .GT. 0.0) GO TO 4000
                  IF (SIGN * DET(UP(1,I),VPJ,VPK) .LT. 0.0) GO TO 4000
                  IF (SIGN * DET(VPI,UP(1,I),VPK) .LT. 0.0) GO TO 4000
                  IF (SIGN * DET(VPI,VPJ,UP(1,I)) .LT. 0.0) GO TO 4000
                  IF (NP .GT. MAXPPP) CALL ERROR(320,INT(NP),0.0)
C CALCULATED WHETHER POINT IS ON YON SIDE OF PLANE
                  YON(NP) = AIJK(1,IP) * (AIJK(1,IP) + UP(1,I)) +
     1      AIJK(2,IP) * (AIJK(2,IP) + UP(2,I)) +
     2      AIJK(3,IP) * (AIJK(3,IP) + UP(3,I)) .LT. 0.0
C OVERLAPPING REENTRANT SURFACE REMOVAL
C FOR SYMMETRY-RELATED PROBE POSITIONS
                       IF (YON(NP) .AND. BOTH) GO TO 4000
C CALCULATE COORDINATES OF SURFACE POINT
                       DO 3800 K = 1,3
                          S(K,NP) = PIJK(K,IP) + UP(K,I) * RP
3800                   CONTINUE
C FIND THE CLOSEST ATOM AND PUT THE THREE ATOM NUMBERS
C IN THE PROPER ORDER
C N1 IS CLOSEST, N2 < N3
                       DSI = DIST(S(1,NP),CI) - RI
                       DSJ = DIST(S(1,NP),CJ) - RJ
                       DSK = DIST(S(1,NP),CK) - RK
                       IF (DSI .LE. DSJ .AND. DSI .LE. DSK) GO TO 3850
                       IF (DSJ .LE. DSI .AND. DSJ .LE. DSK) GO TO 3900
                       IF (.NOT. SK) GO TO 4000
                       N1(NP) = KATOM
                       N2(NP) = IATOM
                       N3(NP) = JATOM
                       GO TO 3950
3850                   CONTINUE
                       IF (.NOT. SI) GO TO 4000
                       N1(NP) = IATOM
                       N2(NP) = JATOM
                       N3(NP) = KATOM
                       GO TO 3950
3900                   CONTINUE
                       IF (.NOT. SJ) GO TO 4000
                       N1(NP) = JATOM
                       N2(NP) = IATOM
                       N3(NP) = KATOM
3950                   CONTINUE
                       NP = NP + 1
C END OF NUP LOOP
4000                CONTINUE
                    NP = NP - 1
C SKIP THE WRITE IF NO POINTS
                    IF (NP .LE. 0) GO TO 4150
C
C
C WRITE THE MOLECULE NUMBER, SHAPE, NUMBER OF POINTS,
C PROBE POSITION AND
C THE VECTOR FROM THE BASE TO THE PROBE CENTER
                    WRITE (4) IMOL,ISHAPE,NP,(PIJK(K,IP),K=1,3),
     1     (AIJK(K,IP),K=1,3),YONPRB,BURY
C SAVE PROBE IN YON PROBE ARRAYS
                    IF (YONPRB) THEN
C CHECK FOR OVERFLOW
                       IF (NY .GE. MAXYON) CALL ERROR(720,NY,0.0)
                       NY = NY + 1
                       MOLYON(NY) = IMOL
                       DO 4050 K = 1,3
                          PY(K,NY) = PIJK(K,IP)
                          AY(K,NY) = AIJK(K,IP)
4050                   CONTINUE
                    END IF
C
C WRITE SURFACE POINTS FOR THIS PROBE POSITION
                    DO 4100 I = 1,NP
             WRITE (4) N1(I),N2(I),N3(I),(S(K,I),K=1,3),AREA,YON(I)
4100                CONTINUE
C END OF IP LOOP
4150             CONTINUE
C END OF CONCAVE REENTRANT LOOP
4200          CONTINUE
C
C SADDLE-SHAPED REENTRANT
              ISHAPE = 2
C
C CHECK FOR NEITHER ATOM TO BE SURFACES
              IF (.NOT. (SI .OR. SJ)) GO TO 5150
C
C SPECIAL CHECK FOR BURIED TORI
C
C IF BOTH ATOMS ARE MARKED TO BE SURFACE,
C BUT NEITHER ATOM HAS ANY REENTRANT SURFACE SO FAR
C (AFTER TRIANGLES WITH ALL KATOMS HAVE BEEN CHECKED)
C AND IF THERE IS SOME MUTUAL NEIGHBOR IN THE SAME MOLECULE
C CLOSE ENOUGH SO THAT THE TORUS CANNOT BE FREE,
C THEN WE KNOW THAT THIS MUST BE A BURIED TORUS
C
         IF (SI .AND. SJ .AND. .NOT. SRS(IATOM) .AND. .NOT. SRS(JATOM
     1) .AND. MUTUAL .GT. 0) THEN
                 DO 4250 KNBR = 1,NNBR
                    IF (.NOT. MNBR(KNBR)) GO TO 4250
                    IF (IMOL .NE. MOLNBR(KNBR)) GO TO 4250
                    D2 = DIST2(BIJ,CNBR(1,KNBR))
                    RK2 = ERNBR(KNBR) ** 2 - HIJ ** 2
                    IF (D2 .LT. RK2) GO TO 5150
4250             CONTINUE
              END IF
C CALCULATE NUMBER OF ROTATIONS OF PROBE PAIR,
C ROTATION ANGLE AND ROTATION MATRIX
              RIJ = RI/(RI + RP) + RJ/(RJ + RP)
              AVH = (ABS(HIJ-RP) + HIJ * RIJ)/3
              NROT = SQRT(D) * PI * AVH
              IF (NROT .LT. 1) NROT = 1
              ANGLE = 3.14159/NROT
C SET UP ROTATION MATRIX AROUND X-AXIS
              CALL IMATX(H)
              H(2,2) = COS(ANGLE)
              H(3,3) = H(2,2)
              H(3,2) = SIN(ANGLE)
              H(2,3) = - H(3,2)
C CALCULATE MATRIX TO ROTATE X-AXIS ONTO IATOM-JATOM AXIS
              DO 4300 K = 1,3
                 G(K,1) = UIJ(K)
                 G(K,2) = Q(K)
                 G(K,3) = T(K)
4300          CONTINUE
C MAKE THE PROBE PAIR ROTATION MATRIX BE ABOUT THE IATOM-JATOM AXIS
              CALL CONJ(H,G,GHGT)
C
C ARC GENERATION
              DO 4350 K = 1,3
                 PIJ(K) = BIJ(K) + AIJ(K)
                 VPI(K) = (CI(K) - PIJ(K)) * RP / (RI + RP)
                 VPJ(K) = (CJ(K) - PIJ(K)) * RP / (RJ + RP)
4350          CONTINUE
C
C ROTATE CIRCLE ONTO IATOM-JATOM-PROBE PLANE
C AND SELECT POINTS BETWEEN PROBE-IATOM AND
C PROBE-JATOM VECTOR TO FORM THE ARC
              NARC = 1
              DO 4500 I = 1,NCIRC
                 IF (NARC .GT. MAXARC) CALL ERROR(440,NARC,0.0)
C ROTATION
                 CALL MULTV(CIRCLE(1,I),G,VPS0(1,NARC))
C IF THE VECTOR IS POINTING AWAY FROM THE SYMMETRY LINE
C THE SURFACE POINT CANNOT LIE ON THE INWARD-FACING ARC
                 IF (DOT(VPS0(1,NARC),AIJ) .GT. 0.0) GO TO 4500
                 CALL CROSS(VPI,VPS0(1,NARC),VECTOR)
                 IF (DOT(G(1,3),VECTOR) .LT. 0.0) GO TO 4500
                 CALL CROSS(VPS0(1,NARC),VPJ,VECTOR)
                 IF (DOT(G(1,3),VECTOR) .LT. 0.0) GO TO 4500
C
C MAKE ARC POINT VECTORS ORIGINATE WITH SADDLE CIRCLE CENTER BIJ
C RATHER THAN PROBE CENTER BECAUSE THEY WILL BE
C ROTATED AROUND THE IATOM-JATOM AXIS
                 DO 4400 K = 1,3
                    VBS0(K,NARC,1) = VPS0(K,NARC) + AIJ(K)
4400             CONTINUE
C INVERT ARC THROUGH LINE OF SYMMETRY
                 DUIJ = DOT(UIJ,VBS0(1,NARC,1))
                 DO 4450 K = 1,3
                 VBS0(K,NARC,2) = - VBS0(K,NARC,1) + 2 * DUIJ * UIJ(K)
4450             CONTINUE
C
C CHECK WHETHER THE ARC POINT CROSSES THE IATOM-JATOM AXIS
C AND CALCULATE THE AREA ASSOCIATED WITH THE POINT
                 HT = DOT(AIJ,VBS0(1,NARC,1))/HIJ
                 AYON(NARC) = HT .LT. 0.0
                 ARCA(NARC) = (2*3.14159**2*RP*ABS(HT))/(NCIRC*NROT)
                 NARC = NARC + 1
4500          CONTINUE
              NARC = NARC - 1
C
C INITIALIZE POWER MATRIX TO IDENTITY
              CALL IMATX(POW)
C
C SET KNBR TO ZERO FOR COLLISION AND BURIED CHECKS
              KNBR = 0
C ROTATE THE PROBE PAIR AROUND THE PAIR OF ATOMS
              DO 5100 IROT = 1,NROT
C MULTIPLY ALTITUDE VECTOR BY POWER MATRIX
                 CALL MULTV(AIJ,POW,AIJP(1,1))
C SET UP OPPOSING ALTITUDE
                 DO 4550 K = 1,3
                    AIJP(K,2) = - AIJP(K,1)
4550             CONTINUE
C SET UP PROBE SPHERE POSITIONS
                 DO 4650 IP = 1,2
                    DO 4600 K = 1,3
                       PIJP(K,IP) = BIJ(K) + AIJP(K,IP)
4600                CONTINUE
C CHECK FOR COLLISIONS WITH NEIGHBORING ATOMS
             PAIR(IP) = .NOT. COLLID(PIJP(1,IP),RP,CNBR,ERNBR,MNBR,
     1NNBR,MAXNBR,ISHAPE,JNBR,KNBR,MOLNBR,IMOL,LKF,LKNBR)
4650             CONTINUE
C NO SURFACE GENERATION IF NEITHER PROBE POSITION IS ALLOWED
                 IF (.NOT. PAIR(1) .AND. .NOT. PAIR(2)) GO TO 5050
                 BOTH = PAIR(1) .AND. PAIR(2)
C SOME REENTRANT SURFACE FOR BOTH ATOMS
                 SRS(IATOM) = .TRUE.
                 SRS(JATOM) = .TRUE.
C SKIP TO BOTTOM OF MIDDLE LOOP IF IATOM AND JATOM
C ARE CLOSE ENOUGH AND THE SURFACE POINT DENSITY IS
C LOW ENOUGH SO THAT THE ARC HAS NO POINTS
                 IF (NARC .LE. 0) GO TO 5050
C
C SURFACE GENERATION
                 DO 5000 IP = 1,2
                    IF (.NOT. PAIR(IP)) GO TO 5000
C SET DEFAULT VALUE FOR BURY
                    BURY = .FALSE.
C DON'T CHECK FOR PROBE COLLISIONS AGAINST OTHER MOLECULES
C UNLESS WE NEED TO
             IF (IBURY .GT. 0) BURY = BURIED(PIJP(1,IP),RP,CNBR,RNB
     1R,MNBR,NNBR,MAXNBR,ISHAPE,JNBR,KNBR,MOLNBR,IMOL)
C SKIP IF NOT BURIED AND BURIED SURFACE ONLY FLAG SET
                    IF (IBURY .EQ. 1 .AND. .NOT. BURY) GO TO 5000
C DETERMINE WHETHER PROBE HAS SURFACE ON FAR SIDE OF LINE
                    YONPRB = HIJ .LT. RP .AND. .NOT. BOTH
                    NP = 1
C THE SADDLE-SHAPED REENTRANT SURFACE POINTS COME FROM THE ARC
                    DO 4850 I = 1,NARC
C OVERLAPPING REENTRANT SURFACE REMOVAL
C FOR SYMMETRY-RELATED PROBE POSITIONS
                       IF (BOTH .AND. AYON(I)) GO TO 4850
                       IF (NP .GT. MAXPPP) CALL ERROR(480,INT(NP),0.0)
C ROTATE THE ARC FROM THE XY PLANE ONTO THE IATOM-JATOM-PROBE PLANE
                       CALL MULTV(VBS0(1,I,IP),POW,VBS)
C MAKE COORDINATES RELATIVE TO ORIGIN
                       DO 4700 K = 1,3
                          S(K,NP) = BIJ(K) + VBS(K)
4700                   CONTINUE
C FIND THE CLOSEST ATOM AND SET UP THE ATOM NUMBERS FOR THE POINT
                       DSI = DIST(S(1,NP),CI) - RI
                       DSJ = DIST(S(1,NP),CJ) - RJ
                       IF (DSI .LE. DSJ) GO TO 4750
                       IF (.NOT. SJ) GO TO 4850
                       N1(NP) = JATOM
                       N2(NP) = IATOM
                       N3(NP) = 0
                       GO TO 4800
4750                   CONTINUE
                       IF (.NOT. SI) GO TO 4850
                       N1(NP) = IATOM
                       N2(NP) = JATOM
                       N3(NP) = 0
4800                   CONTINUE
C
C WE'VE GOT A SURFACE POINT
                       YON(NP) = AYON(I)
                       TORUS(NP) = ARCA(I)
                       NP = NP + 1
C END OF ARC POINT LOOP
4850                CONTINUE
                    NP = NP - 1
                    IF (NP .LE. 0) GO TO 5000
C
C WRITE THE MOLECULE NUMBER, SHAPE,NUMBER OF POINTS,
C PROBE POSITION AND THE VECTOR FROM THE BASE TO THE PROBE CENTER
                    WRITE (4) IMOL,ISHAPE,NP,(PIJP(K,IP),K=1,3),
     1   (AIJP(K,IP),K=1,3),YONPRB,BURY
                    IF (YONPRB) THEN
C SAVE PROBE IN YON PROBE ARRAYS
C CHECK FOR OVERFLOW
                       IF (NY .GE. MAXYON) CALL ERROR(720,NY,0.0)
                       NY = NY + 1
                       MOLYON(NY) = IMOL
                       DO 4900 K = 1,3
                          PY(K,NY) = PIJP(K,IP)
                          AY(K,NY) = AIJP(K,IP)
4900                   CONTINUE
                    END IF
C
C WRITE SURFACE POINTS FOR THIS PROBE POSITION
                    DO 4950 I = 1,NP
                       WRITE (4) N1(I),N2(I),N3(I),(S(K,I),K=1,3),
     1   TORUS(I),YON(I)
C END OF ARC POINT LOOP
4950                CONTINUE
C END OF PROBE PAIR LOOP
5000             CONTINUE
C SKIP TO HERE IF BOTH PROBE POSITIONS DISALLOWED OR NO ARC POINTS
5050             CONTINUE
C CALCULATE NEW POWER MATRIX
                 CALL CAT(POW,GHGT)
C END OF ROTATION LOOP
5100          CONTINUE
C END OF NEIGHBOR LOOP
5150       CONTINUE
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C SKIP TO HERE IF VAN DER WAALS SURFACE CALCULATION
5200       CONTINUE
C
C CONTACT SURFACE
           ISHAPE = 1
C SKIP ATOM I IF MARKED NO SURFACE REQUESTED
           IF (.NOT. SI) GO TO 5650
C
C IF WE ARE NOT CALCULATING BURIED SURFACE
C AND THE PROBE RADIUS IS GREATER THAN ZERO
C AND IATOM HAS AT LEAST ONE NEIGHBOR, BUT NO REENTRANT SURFACE,
C THEN IATOM MUST BE COMPLETELY INACCESSIBLE TO THE PROBE
           IF (.NOT. BURY .AND. RP .GT. 0.0 .AND.
     1    NIMOL .GT. 0 .AND. .NOT. SRS(IATOM)) GO TO 5650
C FIND THE INDEX INTO THE ATOM TYPE ARRAYS FOR IATOM
           DO 5250 IDX = 1,NTYPE
              IF (ITYPE(IDX) .EQ. IAT(IATOM)) GO TO 5300
5250       CONTINUE
           STOP 'LOGIC ERROR IN MS REGARDING ATOM TYPES'
5300       CONTINUE
           AREA = (4 * PI * RI ** 2) / NUA(IDX)
C SET JNBR, KNBR TO ZERO FOR COLLISION, BURIED CHECKS
           JNBR = 0
           KNBR = 0
C
C CONTACT PROBE PLACEMENT LOOP
           DO 5600 I = 1,NUA(IDX)
C SET UP PROBE COORDINATES
              DO 5350 K = 1,3
                 PIPT(K) = CI(K) + EVA(K,I,IDX)
5350          CONTINUE
C CHECK FOR COLLISION WITH NEIGHBORING ATOMS
              IF (COLLID(PIPT,RP,CNBR,ERNBR,MNBR,NNBR,MAXNBR,ISHAPE,
     1   JNBR,KNBR,MOLNBR,IMOL,LKF,LKNBR)) GO TO 5600
C GO WRITE IT OUT IF WE DON'T CARE ABOUT BURIED SURFACE
              IF (IBURY .EQ. 0) THEN
                 IB = 0
                 GO TO 5400
              END IF
              BURY = BURIED(PIPT,RP,CNBR,RNBR,MNBR,NNBR,MAXNBR,ISHAPE,
     1     JNBR,KNBR,MOLNBR,IMOL)
              IF (IBURY .EQ. 1 .AND. .NOT. BURY) GO TO 5600
              IF (BURY) THEN
                 IB = 1
              ELSE
                 IB = 0
              END IF
C
5400          CONTINUE
C INCREMENT SURFACE POINT COUNTER FOR CONVEX SURFACE
              NSHAPE(1) = NSHAPE(1) + 1
C ADD SURFACE POINT AREA TO CONTACT AREA
              AREAC = AREAC + AREA
              IATNUM(1) = IATOM
              IATNUM(2) = 0
              IATNUM(3) = 0
              DO 5450 K = 1,3
                 OUTCO(K) = CI(K) + RI * UA(K,I,IDX)
                 OUTVEC(K) = UA(K,I,IDX)
5450          CONTINUE
C FOUR DIFFERENT OUTPUT FORMATS
cxia	In the next 4 WRITE statements, channel 7 are changed to channel 6
              IF (ASCII .AND. LONG) THEN
                 WRITE(6,5500) IATNUM,ISHAPE,OUTCO,AREA,OUTVEC,IB
5500             FORMAT(3I5,I2,3F9.3,4F7.3,I2)
              ELSE IF (.NOT. ASCII .AND. LONG) THEN
                 WRITE(6) IATNUM,ISHAPE,OUTCO,AREA,OUTVEC,IB
              ELSE IF (ASCII .AND. .NOT. LONG) THEN
                 WRITE(6,5550) IATNUM,ISHAPE,OUTCO,IB
5550             FORMAT(3I5,I2,3F9.3,I2)
              ELSE IF (.NOT. ASCII .AND. .NOT. LONG) THEN
                 WRITE(6) IATNUM,ISHAPE,OUTCO,IB
              END IF
C
C END OF NUA LOOP
5600       CONTINUE
C END OF IATOM LOOP
5650    CONTINUE
C
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
C WRITE OUT MESSAGES
C
C FOR ARRAY DIMENSIONING
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,5700) MAXNB
5700    FORMAT(1X,I5,' NEIGHBORS MAXIMUM')
C
C CLOSE CONTACT AND BEFORE FILES
cxia        CLOSE(7)
C IF VAN DER WAALS SURFACE WE ARE FINISHED
        IF (RP .EQ. 0.0) GO TO 8000
        CLOSE(4)
C
C ORSR    ORSR    ORSR    ORSR    ORSR    ORSR    ORSR    ORSR    ORSR
C
C
C OVERLAPPING REENTRANT SURFACE REMOVAL
C FOR NON-SYMMETRY-RELATED PROBES
C PROBE DIAMETER
        DP = 2 * RP
C DIAMETER SQUARED
        DP2 = DP ** 2
C RADIUS SQUARED
        RP2 = RP ** 2
C WIDTH FOR CUBING ALGORITHM
C       WIDTH = DP
C
C     SET UP CUBE ARRAYS
C     FIRST THE INTEGER COORDINATE ARRAYS
        DO 5850 IY = 1,NY
           DO 5800 K = 1,3
              ICO(K,IY) = (PY(K,IY)-COMIN(K)-RADMAX-RP)/WIDTH + 1
              IF (ICO(K,IY) .LT. 1) ICO(K,IY) = 1
           IF (ICO(K,IY) .GT. MAXCUB) STOP 'CUBE COORDINATE TOO LARGE'
5800       CONTINUE
5850    CONTINUE
C
C INITIALIZE HEAD POINTER ARRAY
        DO 6000 K = 1,MAXCUB
           DO 5950 J = 1,MAXCUB
              DO 5900 I = 1,MAXCUB
                 ICUBE(I,J,K) = 0
5900          CONTINUE
5950       CONTINUE
6000    CONTINUE
C
C INITIALIZE LINKED LIST POINTERS
        DO 6050 IY = 1,MAXYON
           ICUPTR(IY) = 0
6050    CONTINUE
C
C SET UP HEAD AND LATER POINTERS FOR EACH YON PROBE
        DO 6200 IY = 1,NY
C SKIP ATOMS WITH SURFACE REQUEST NUMBERS OF ZERO
           I = ICO(1,IY)
           J = ICO(2,IY)
           K = ICO(3,IY)
           IF (ICUBE(I,J,K) .LE. 0) THEN
C     FIRST ATOM IN THIS CUBE
              ICUBE(I,J,K) = IY
           ELSE
C     ADD TO END OF LINKED LIST
              IPTR = ICUBE(I,J,K)
6100          CONTINUE
              IF (ICUPTR(IPTR) .LE. 0) GO TO 6150
              IPTR = ICUPTR(IPTR)
              GO TO 6100
6150          CONTINUE
              ICUPTR(IPTR) = IY
           END IF
6200    CONTINUE
C
C REOPEN BEFORE FILE FOR READING
        OPEN(4,FILE=before,FORM='UNFORMATTED',STATUS='OLD')
C
C FIRST PASS
C GATHER VICTIM PROBES
        NV = 1
C NO VICTIM PROBES IF NO YON PROBES
        IF (NY .LE. 0) GO TO 6950
        REWIND(4)
C INITIALIZE VICTIM HASHING ARRAY
        DO 6250 J = 1,MAXVIC
           IVIC(J) = 0
6250    CONTINUE
C INITIALIZE INDEX OF FREE SLOT LAST USED
        IFRLST = 0
C INITIALIZE PROBE RECORD NUMBER
        I = 1
6300    CONTINUE
C CHECK FOR VICTIM OVERFLOW
        IF (NV .GT. MAXVIC) CALL ERROR(760,NV,0.0)
C READ REENTRANT PROBE AND POINTS
        READ (4,END=6950) MOLVIC(NV),ISHAPE,NP,
     1   (PV(K,NV),K=1,3),(AV(K,NV),K=1,3),YONPRB,BURY
        DO 6350 J = 1,NP
           READ (4) N1(1),N2(1),N3(1),(S(K,1),K=1,3),AREA,YON(1)
6350    CONTINUE
        IF (YONPRB) GO TO 6900
C CHECK IF PROBE TOO FAR FROM SYMMETRY ELEMENT FOR POSSIBLE OVERLAP
        IF (ANORM(AV(1,NV)) .GT. DP) GO TO 6900
C
C LOOK FOR OVERLAP WITH ANY YON PROBE IN THE SAME MOLECULE
C USE CUBING ALGORITHM TO SAVE TIME
C
C CALCULATE WHICH CUBE THIS PROBE LIES IN
        ICI = (PV(1,NV)-COMIN(1)-RADMAX-RP)/WIDTH + 1
        IF (ICI .LT. 1) ICI = 1
        IF (ICI .GT. MAXCUB) STOP 'CUBE COORDINATE TOO LARGE'
        ICJ = (PV(2,NV)-COMIN(2)-RADMAX-RP)/WIDTH + 1
        IF (ICJ .LT. 1) ICJ = 1
        IF (ICJ .GT. MAXCUB) STOP 'CUBE COORDINATE TOO LARGE'
        ICK = (PV(3,NV)-COMIN(3)-RADMAX-RP)/WIDTH + 1
        IF (ICK .LT. 1) ICK = 1
        IF (ICK .GT. MAXCUB) STOP 'CUBE COORDINATE TOO LARGE'
C CHECK FOR OVERLAP WITH PROBES IN ADJOINING CUBES
        DO 6850 JCK = ICK-1,ICK+1
           IF (JCK .LT. 1 .OR. JCK .GT. MAXCUB) GO TO 6850
           DO 6800 JCJ = ICJ-1,ICJ+1
              IF (JCJ .LT. 1 .OR. JCJ .GT. MAXCUB) GO TO 6800
              DO 6750 JCI = ICI-1,ICI+1
                 IF (JCI .LT. 1 .OR. JCI .GT. MAXCUB) GO TO 6750
                 JP = ICUBE(JCI,JCJ,JCK)
C
C
6400             CONTINUE
                 IF (JP .LE. 0) GO TO 6700
                 IF (MOLYON(JP) .NE. MOLVIC(NV)) GO TO 6650
                 X = ABS(PY(1,JP) - PV(1,NV))
                 IF (X .GE. DP) GO TO 6650
                 Y = ABS(PY(2,JP) - PV(2,NV))
                 IF (Y .GE. DP) GO TO 6650
                 Z = ABS(PY(3,JP) - PV(3,NV))
                 IF (Z .GE. DP) GO TO 6650
                 D2 = X**2 + Y**2 + Z**2
                 IF (D2 .GE. DP2) GO TO 6650
C CHECK THAT PROBES FACE EACH OTHER
                 IF (DOT(AY(1,JP),AV(1,NV)) .GE. 0.0) GO TO 6650
C NEW VICTIM PROBE
C PUT INTO HASHING TABLE
                 IHASH = MOD(I,MAXVIC) + 1
                 IF (IVIC(IHASH) .EQ. 0) THEN
C EMPTY SLOT
                    IVIC(IHASH) = I
                    IVICP(IHASH) = 0
                 ELSE
                    IPREV = IHASH
                    IPTR = IVICP(IHASH)
6450                CONTINUE
C CHECK FOR END OF LINKED LIST
                    IF (IPTR .EQ. 0) GO TO 6500
                    IPREV = IPTR
                    IPTR = IVICP(IPTR)
                    GO TO 6450
6500                CONTINUE
C LOOK FOR A FREE SLOT
                    DO 6550 IFREE = IFRLST+1,MAXVIC
                       IF (IVIC(IFREE) .EQ. 0) GO TO 6600
6550                CONTINUE
                    STOP 'VICTIM OVEFLOW'
6600                CONTINUE
C STORE RECORD NUMBER IN FREE SLOT
                    IVIC(IFREE) = I
                    IVICP(IPREV) = IFREE
                    IVICP(IFREE) = 0
C NEW INDEX TO LAST FREE SLOT USED
                    IFRLST = IFREE
                 END IF
                 NV = NV + 1
C ONE OVERLAP MAKES THIS PROBE A VICTIM
C WE DON'T NEED TO CHECK ANY MORE
                 GO TO 6900
6650             CONTINUE
                 JP = ICUPTR(JP)
                 GO TO 6400
6700             CONTINUE
6750          CONTINUE
6800       CONTINUE
6850    CONTINUE
C END OF YON PROBE LOOP
C SKIP TO HERE IF FINISHED WITH HUNT FOR OVERLAPPING PROBES
6900    CONTINUE
        I = I + 1
        GO TO 6300
C SKIP TO HERE IF THERE ARE NO YON PROBES AND HENCE NO VICTIMS
6950    CONTINUE
        NV = NV - 1
C
C OPEN REENTRANT FILE FOR WRITING
	if (iargc().gt.2) then 
	    filnam = workdir(1:jwdlength-1)//'/REENTRANT'
	else
	    filnam = 'REENTRANT'
	endif
        IF (ASCII) THEN
	   OPEN(UNIT=8, FILE=filnam, STATUS='NEW')
        ELSE
	   OPEN(UNIT=8, FILE=filnam, FORM='UNFORMATTED',STATUS='NEW')
        END IF
        REWIND(8)
C
C SECOND PASS
C READ, CHECK AND WRITE SURFACE POINTS
        REWIND(4)
        I = 1
7000    CONTINUE
        READ (4,END=7850) IMOL,ISHAPE,NP,
     1   (P(K),K=1,3),(A(K),K=1,3),YONPRB,BURY
C NO POINTS CAN BE EATEN IF THIS PROBE IS NEITHER YON NOR A VICTIM
        NEAT = 0
        NYEAT = 0
        IF (NY .LE. 0) GO TO 7450
        IPT = 0
C DETERMINE IF PROBE IS A YON OR VICTIM PROBE
        IF (.NOT. YONPRB) GO TO 7050
C WE'VE GOT A YON PROBE HERE
        IPT = 2
        GO TO 7200
7050    CONTINUE
        IF (NV .LE. 0) GO TO 7450
C HASH INTO TABLE OF VICTIM PROBES
        IPTR = MOD(I,MAXVIC) + 1
7100    CONTINUE
        IF (IPTR .EQ. 0) GO TO 7200
        IF (IVIC(IPTR) .EQ. 0) GO TO 7200
        IF (IVIC(IPTR) .EQ. I) GO TO 7150
        IPTR = IVICP(IPTR)
        GO TO 7100
7150    CONTINUE
C WE'VE GOT A VICTIM
        IPT = 1
7200    CONTINUE
C
        IF (IPT .LE. 0) GO TO 7450
C CHECK THIS VICTIM OR YON PROBE AGAINST ALL YON PROBES
        DO 7300 J = 1,NY
           IF (IMOL .NE. MOLYON(J)) GO TO 7300
           IF (DIST2(P,PY(1,J)) .GE. DP2) GO TO 7300
           IF (DOT(A,AY(1,J)) .GE. 0.0) GO TO 7300
C THIS YON PROBE COULD EAT SOME OF THE PROBE'S POINTS
           NEAT = NEAT + 1
           NYEAT = NYEAT + 1
           IF (NEAT .GT. MAXEAT) CALL ERROR(830,NEAT,0.0)
           DO 7250 K = 1,3
              EAT(K,NEAT) = PY(K,J)
7250       CONTINUE
C END OF YON PROBE LOOP
7300    CONTINUE
C
C ONLY YON PROBES CAN HAVE THEIR POINTS EATEN BY VICTIMS
        IF (IPT .LE. 1) GO TO 7450
C CHECK THIS YON PROBE AGAINST ALL VICTIM PROBES
        DO 7400 J = 1,NV
           IF (IMOL .NE. MOLVIC(J)) GO TO 7400
           IF (DIST2(P,PV(1,J)) .GE. DP2) GO TO 7400
           IF (DOT(A,AV(1,J)) .GE. 0.0) GO TO 7400
C THIS VICTIM PROBE COULD EAT SOME OF THE PROBE'S POINTS
           NEAT = NEAT + 1
           IF (NEAT .GT. MAXEAT) CALL ERROR(850,NEAT,0.0)
           DO 7350 K = 1,3
              EAT(K,NEAT) = PV(K,J)
7350       CONTINUE
C END OF VICTIM PROBE LOOP
7400    CONTINUE
C
C SKIP TO HERE IF VICTIM OR BOTH PROBE OVERLAP CHECKS OMITTED
7450    CONTINUE
C
C READ THE SURFACE POINTS BELONGING TO THE PROBE
        DO 7750 J = 1,NP
           READ (4) N1(1),N2(1),N3(1),(S(K,1),K=1,3),AREA,YON(1)
           IF (NEAT .LE. 0) GO TO 7550
C CHECK SURFACE POINT AGAINST ALL EATERS OF THIS PROBE
           DO 7500 K = 1,NEAT
C VICTIM PROBES CANNOT EAT NON-YON POINTS OF YON PROBES
          IF (YONPRB .AND. .NOT. YON(1) .AND. K .GT. NYEAT) GO TO 7500
            IF (DIST2(EAT(1,K),S(1,1)) .LT. RP2) GO TO 7700
7500       CONTINUE
C SKIP TO HERE IF NO OVERLAPPING PROBES COULD EAT THIS POINT
7550       CONTINUE
           DO 7600 K = 1,3
              OUTVEC(K) = (P(K) - S(K,1))/RP
7600       CONTINUE
C REENTRANT SURFACE POINT
           NSHAPE(ISHAPE) = NSHAPE(ISHAPE) + 1
           AREAR = AREAR + AREA
C MARK WHETHER BURIED
           IB = 0
           IF (IBURY .GT. 0 .AND. BURY) IB = 1
C FOUR POSSIBLE OUTPUT FORMATS
           IATNUM(1) = N1(1)
           IATNUM(2) = N2(1)
           IATNUM(3) = N3(1)
           DO 7650 K = 1,3
              OUTCO(K) = S(K,1)
7650       CONTINUE
           IF (ASCII .AND. LONG) THEN
              WRITE (8,5500) IATNUM,ISHAPE,OUTCO,AREA,OUTVEC,IB
           ELSE IF (.NOT. ASCII .AND. LONG) THEN
              WRITE (8) IATNUM,ISHAPE,OUTCO,AREA,OUTVEC,IB
           ELSE IF (ASCII .AND. .NOT. LONG) THEN
              WRITE (8,5550) IATNUM,ISHAPE,OUTCO,IB
           ELSE IF (.NOT. ASCII .AND. .NOT. LONG) THEN
              WRITE (8) IATNUM,ISHAPE,OUTCO,IB
           END IF
           GO TO 7750
7700       CONTINUE
           NLOST(ISHAPE) = NLOST(ISHAPE) + 1
C END OF NP LOOP
7750    CONTINUE
C END OF I LOOP
7800    CONTINUE
        I = I + 1
        GO TO 7000
7850    CONTINUE
C CLOSE FILES
        CLOSE(4)
        CLOSE(8)
C MESSAGES
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,7900) NY,NV
7900    FORMAT(1X,I5,' YON AND ',I5,' VICTIM PROBES')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,7950) NLOST(2),NLOST(3)
7950    FORMAT(1X,I5,' SADDLE AND ',I5,
     1   ' CONCAVE SURFACE POINTS REMOVED DURING NON-SYMMETRY ORSR')
8000    CONTINUE
C WRITE OUT HOW MANY POINTS
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,8050) NSHAPE(1),NSHAPE(2),NSHAPE(3)
8050    FORMAT(1X,I5,' CONTACT AND ',I5,' SADDLE AND ',
     1   I5,' CONCAVE SURFACE POINTS')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,8100) NSHAPE(1) + NSHAPE(2) + NSHAPE(3)
8100    FORMAT(1X,I8,' TOTAL SURFACE POINTS')
	WRITE(7,'(A7,$)')'MS stderr '
        WRITE (7,8150) AREAC,AREAR,AREAC+AREAR
8150    FORMAT(1X,'CONTACT AREA:',F10.3,2X,'REENTRANT AREA:',F10.3,
     1  2X,'TOTAL AREA:',F10.3)
        STOP
        END
C
C
C SUBROUTINES AND FUNCTIONS
C
C
C GENERAL VECTOR AND MATRIX ROUTINES
C
        FUNCTION DIST(A,B)
C DISTANCE BETWEEN A AND B
        REAL A(3)
        REAL B(3)
        DIST = SQRT((A(1)-B(1))**2 + (A(2)-B(2))**2 + (A(3)-B(3))**2)
        RETURN
        END
C
        FUNCTION DIST2(A,B)
C DISTANCE BETWEEN A AND B SQUARED
        REAL A(3)
        REAL B(3)
        DIST2 = (A(1)-B(1))**2 + (A(2)-B(2))**2 + (A(3)-B(3))**2
        RETURN
        END
C
        FUNCTION ANORM(A)
C NORM OF A
        REAL A(3)
        ANORM = SQRT(A(1)**2 + A(2)**2 + A(3)**2)
        RETURN
        END
C
        FUNCTION DOT(A,B)
C DOT PRODUCT
        REAL A(3)
        REAL B(3)
        DOT = A(1)*B(1) + A(2)*B(2) + A(3)*B(3)
           RETURN
           END
C
        SUBROUTINE CROSS(A,B,C)
C CROSS PRODUCT
        REAL A(3)
        REAL B(3)
        REAL C(3)
        C(1) = A(2) * B(3) - A(3) * B(2)
        C(2) = A(3) * B(1) - A(1) * B(3)
        C(3) = A(1) * B(2) - A(2) * B(1)
        RETURN
        END
C
        SUBROUTINE MULTV(V,A,W)
C MULTIPLY V BY A GIVING W
        REAL A(3,3)
        REAL V(3)
        REAL W(3)
        DO 50 I = 1, 3
           W(I) = A(I,1)*V(1) + A(I,2)*V(2) + A(I,3)*V(3)
50      CONTINUE
        RETURN
        END
C
        SUBROUTINE VNORM(A,B)
C NORMALIZE A GIVING B
        REAL A(3),B(3)
        V = ANORM(A)
        DO 50 K = 1,3
           B(K) = A(K) / V
50      CONTINUE
        RETURN
        END
C
        SUBROUTINE VPERP(A,B)
C RETURN B PERPENDICULAR TO A
        REAL A(3)
        REAL B(3)
        REAL P(3)
C FIND SMALLEST COMPONENT
        SMALL = 10000.0
        M = 0
        DO 50 K = 1,3
           IF (ABS(A(K)) .GE. SMALL) GO TO 50
           SMALL = ABS(A(K))
           M = K
50      CONTINUE
        DO 100 K = 1,3
           B(K) = 0.0
           IF (K .EQ. M) B(K) = 1.0
100     CONTINUE
C TAKE PROJECTION ALONG A
        DT = A(M) / (A(1)**2 + A(2)**2 + A(3)**2)
        DO 150 K = 1, 3
           P(K) = DT * A(K)
C SUBTRACT PROJECTION FROM B
           B(K) = B(K) - P(K)
150     CONTINUE
C RENORMALIZE B
        CALL VNORM(B,B)
        RETURN
        END
C
        SUBROUTINE CAT(A,B)
C CONCATENATE MATRIX B INTO MATRIX A
        REAL A(3,3)
        REAL B(3,3)
        REAL TEMP(3,3)
        DO 100 I = 1,3
           DO 50 J = 1,3
           TEMP(I,J) = A(I,1)*B(1,J) + A(I,2)*B(2,J) + A(I,3)*B(3,J)
50         CONTINUE
100     CONTINUE
        DO 200 I = 1,3
           DO 150 J = 1,3
              A(I,J) = TEMP(I,J)
150        CONTINUE
200     CONTINUE
        RETURN
        END
C
        SUBROUTINE CONJ(H,G,GHGT)
C CONJUGATE MATRIX G WITH MATRIX H GIVING GHGT
        REAL G(3,3)
        REAL H(3,3)
        REAL GHGT(3,3)
        REAL GT(3,3)
C INITIALIZE GHGT MATRIX TO IDENTITY
C CONCATENATE G H GT
        CALL IMATX(GHGT)
        CALL CAT(GHGT,G)
        CALL CAT(GHGT,H)
C CALCULATE GT
        DO 100 K = 1,3
           DO 50 L = 1,3
              GT(K,L) = G(L,K)
50         CONTINUE
100     CONTINUE
        CALL CAT(GHGT,GT)
        RETURN
        END
C
        SUBROUTINE IMATX(A)
C LOAD IDENTITY MATRIX
        REAL A(3,3)
        DO 100 I = 1,3
           DO 50 J = 1,3
              A(I,J) = 0.0
50         CONTINUE
           A(I,I) = 1.0
100     CONTINUE
        RETURN
        END
C
        FUNCTION DET(A,B,C)
C RETURN TRIPLE PRODUCT OF THE THREE VECTORS
        REAL A(3)
        REAL B(3)
        REAL C(3)
        REAL AB(3)
        CALL CROSS(A,B,AB)
        DET = DOT(AB,C)
        RETURN
        END
C
C GEOMETRIC ROUTINES
C
C
        LOGICAL FUNCTION COLLID(P,RP,CNBR,ERNBR,MNBR,NNBR,MAXNBR,ISHAPE,
     1   JNBR,KNBR,MOLNBR,IMOL,LKF,LKNBR)
C COLLISION CHECK OF PROBE WITH NEIGHBORING ATOMS
C BELONGING TO THE SAME MOLECULE
        REAL P(3)
        REAL CNBR(3,MAXNBR)
        REAL ERNBR(MAXNBR)
        LOGICAL*1 MNBR(MAXNBR)
        INTEGER*2 MOLNBR(MAXNBR)
        INTEGER*2 LKNBR(MAXNBR)
        INTEGER*2 IMOL,ISHAPE
C
C CHECK WHETHER PROBE IS TOO CLOSE TO ANY NEIGHBOR
        I = LKF
        GO TO 100
50      CONTINUE
        I = LKNBR(I)
100     CONTINUE
        IF (I .EQ. 0) GO TO 150
        VECT1 = ABS(P(1) - CNBR(1,I))
        IF (VECT1 .GE. ERNBR(I)) GO TO 50
        VECT2 = ABS(P(2) - CNBR(2,I))
        IF (VECT2 .GE. ERNBR(I)) GO TO 50
        VECT3 = ABS(P(3) - CNBR(3,I))
        IF (VECT3 .GE. ERNBR(I)) GO TO 50
        IF (I .EQ. JNBR .OR. I .EQ. KNBR) GO TO 50
        SR2 = ERNBR(I) ** 2
        DD2 = VECT1 ** 2 + VECT2 ** 2 + VECT3 ** 2
        IF (DD2 .GE. SR2) GO TO 50
        COLLID = .TRUE.
        RETURN
150     CONTINUE
        COLLID = .FALSE.
        RETURN
        END
C
        LOGICAL FUNCTION BURIED(P,RP,CNBR,RNBR,MNBR,NNBR,MAXNBR,ISHAPE,
     1   JNBR,KNBR,MOLNBR,IMOL)
C COLLISION CHECK OF PROBE WITH NEIGHBORING ATOMS
C BELONGING TO A DIFFERENT MOLECULE
        REAL P(3)
        REAL CNBR(3,MAXNBR)
        REAL RNBR(MAXNBR)
        LOGICAL*1 MNBR(MAXNBR)
        INTEGER*2 MOLNBR(MAXNBR)
        INTEGER*2 IMOL,ISHAPE
C
        IF (NNBR .LE. 0) GO TO 100
C CHECK WHETHER PROBE IS TOO CLOSE TO ANY NEIGHBOR
        DO 50 I = 1, NNBR
           IF (IMOL .EQ. MOLNBR(I)) GO TO 50
           IF (ISHAPE .GT. 1 .AND. I .EQ. JNBR) GO TO 50
           IF (ISHAPE .EQ. 3 .AND. (I .EQ. KNBR .OR. .NOT. MNBR(I)))
     1   GO TO 50
           SUMRAD = RP + RNBR(I)
           VECT1 = ABS(P(1) - CNBR(1,I))
           IF (VECT1 .GE. SUMRAD) GO TO 50
           VECT2 = ABS(P(2) - CNBR(2,I))
           IF (VECT2 .GE. SUMRAD) GO TO 50
           VECT3 = ABS(P(3) - CNBR(3,I))
           IF (VECT3 .GE. SUMRAD) GO TO 50
           SR2 = SUMRAD ** 2
           DD2 = VECT1 ** 2 + VECT2 ** 2 + VECT3 ** 2
           IF (DD2 .LT. SR2) GO TO 150
50      CONTINUE
100     CONTINUE
        BURIED = .FALSE.
        GO TO 200
150     CONTINUE
        BURIED = .TRUE.
200     CONTINUE
        RETURN
        END
C
        SUBROUTINE GENUN(U,N)
C GENERATE UNIT VECTORS OVER SPHERE
        REAL U(3,N)
        NEQUAT = SQRT(N * 3.14159)
        NVERT = 0.5 * NEQUAT
        IF (NVERT .LT. 1) NVERT = 1
        NU = 0
        DO 100 I = 0,NVERT
           FI = (3.14159 * I) / NVERT
           Z = COS(FI)
           XY = SIN(FI)
           NHOR = NEQUAT * XY
           IF (NHOR .LT. 1) NHOR = 1
           DO 50 J = 0,NHOR-1
              FJ = (2 * 3.14159 * J) / NHOR
              X = COS(FJ) * XY
              Y = SIN(FJ) * XY
              IF (NU .GE. N) GO TO 150
              NU = NU + 1
              U(1,NU) = X
              U(2,NU) = Y
              U(3,NU) = Z
50         CONTINUE
100     CONTINUE
150     CONTINUE
        N = NU
        RETURN
        END
C
C ERROR MESSAGE SUBROUTINE
C
        SUBROUTINE ERROR(NUMBER,INT,FLOAT)
C
        DIMENSION LIST(15)
        DATA LIST/120,127,130,140,150,160,170,
     1   210,320,440,480,720,760,830,850/
C
        DO 50 I = 1,15
           IF (LIST(I) .EQ. NUMBER) GO TO 150
50      CONTINUE
        WRITE (*,100)
100     FORMAT(1X,'ERROR OF UNIDENTIFIABLE TYPE')
        STOP
150     CONTINUE
C
        GO TO (200,300,400,500,600,700,800,900,1000,1100,1200,
     1   1300,1400,1500,1600) I
C
200     WRITE (*,250) NUMBER,FLOAT
250     FORMAT(1X,'ERROR',I5,2X,'NEGATIVE PROBE RADIUS:',F10.5)
        STOP
300     WRITE (*,350) NUMBER,INT
350     FORMAT(1X,'ERROR',I5,2X,'BAD BURIED SURFACE FLAG:',I5)
        STOP
400     WRITE (*,450) NUMBER,INT
450     FORMAT(1X,'ERROR',I5,2X,'TOO FEW OR TOO MANY ATOM TYPES:',I5)
        STOP
500     WRITE (*,550) NUMBER,FLOAT,INT
550     FORMAT(1X,'ERROR',I5,2X,'NEGATIVE ATOM RADIUS:',
     1   F10.5,' ATOM',I5)
        STOP
600     WRITE (*,650) NUMBER,INT
650     FORMAT(1X,'ERROR',I5,2X,'TOO MANY ATOMS:',I5)
        STOP
700     WRITE (*,750) NUMBER,INT
750     FORMAT(1X,'ERROR',I5,2X,
     1   'INVALID SURFACE REQUEST NUMBER FOR ATOM:',I5)
        STOP
800     WRITE (*,850) NUMBER,INT
850     FORMAT(1X,'ERROR',I5,2X,'INVALID ATOM TYPE FOR ATOM:',I5)
        STOP
900     WRITE (*,950) NUMBER,INT
950     FORMAT(1X,'ERROR',I5,2X,'TOO MANY NEIGHBORS:',I5)
        STOP
1000    WRITE (*,1050) NUMBER,INT
1050    FORMAT(1X,'ERROR',I5,2X,'TOO MANY POINTS FOR REENTRANT PROBE:',
     1  I5)
        STOP
1100    WRITE (*,1150) NUMBER,INT
1150    FORMAT(1X,'ERROR',I5,2X,'TOO MANY POINTS FOR ARC:',I5)
        STOP
1200    WRITE (*,1250) NUMBER,INT
1250    FORMAT(1X,'ERROR',I5,2X,'TOO MANY POINTS FOR REENTRANT PROBE:',
     1  I5)
        STOP
1300    WRITE (*,1350) NUMBER,INT
1350    FORMAT(1X,'ERROR',I5,2X,'TOO MANY YON PROBES:',I5)
        STOP
1400    WRITE (*,1450) NUMBER,INT
1450    FORMAT(1X,'ERROR',I5,2X,'TOO MANY VICTIM PROBES:',I5)
        STOP
1500    WRITE (*,1550) NUMBER,INT
1550    FORMAT(1X,'ERROR',I5,2X,'TOO MANY EATERS:',I5)
        STOP
1600    WRITE (*,1650) NUMBER,INT
1650    FORMAT(1X,'ERROR',I5,2X,'TOO MANY EATERS:',I5)
        STOP
        END
